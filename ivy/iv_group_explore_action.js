/**
 * N√°zev souboru: iv_group_explore_action.js
 * Um√≠stƒõn√≠: ~/ivy/iv_group_explore_action.js
 *
 * Popis: Implementace akce group_explore pro prozkoum√°v√°n√≠ FB skupin
 * Neinvazivn√≠ aktivita, kter√° se opakuje nekoneƒçnƒõ pokud nejsou dostupn√© posting akce
 */

import { Log } from './libs/iv_log.class.js';
import { FBGroupAnalyzer } from './iv_fb_group_analyzer.js';
import { db } from './iv_sql.js';
import { Wait } from './libs/iv_wait.class.js';

export class GroupExploreAction {
  constructor() {
    this.actionCode = 'group_explore';
    this.isRunning = false;
  }

  /**
   * Hlavn√≠ v√Ωkonn√° funkce akce group_explore
   */
  async execute(user, fbBot, options = {}) {
    if (this.isRunning) {
      Log.info(`[${user.id}]`, 'Group explore u≈æ bƒõ≈æ√≠, p≈ôeskakuji...');
      return { success: false, reason: 'Already running' };
    }

    this.isRunning = true;

    try {
      Log.info(`[${user.id}]`, 'Spou≈°t√≠m group_explore akci...');

      if (!fbBot || !fbBot.page || fbBot.page.isClosed()) {
        throw new Error('FBBot nen√≠ dostupn√Ω');
      }

      const currentUrl = fbBot.page.url();
      
      // Pokud nejsme ve skupinƒõ, zkus√≠me naj√≠t nƒõjakou
      if (!currentUrl.includes('facebook.com/groups/')) {
        const navigated = await this.navigateToRandomGroup(user, fbBot);
        if (!navigated) {
          throw new Error('Nepoda≈ôilo se navigovat do ≈æ√°dn√© skupiny');
        }
      }

      // Inicializace analyz√°toru
      const analyzer = new FBGroupAnalyzer(fbBot.page);

      // Anal√Ωza souƒçasn√© skupiny
      const groupInfo = await analyzer.analyzeCurrentGroup(user.id);
      if (!groupInfo) {
        throw new Error('Nepoda≈ôilo se analyzovat skupinu');
      }

      Log.info(`[${user.id}]`, `Analyzov√°na skupina: ${groupInfo.name} (${groupInfo.member_count} ƒçlen≈Ø)`);

      // N√°hodn√© ƒçek√°n√≠ pro simulaci lidsk√©ho chov√°n√≠
      await Wait.toSeconds(8, 'Simulace lidsk√©ho chov√°n√≠');

      // Rozhodnut√≠ o dal≈°√≠ aktivitƒõ
      const nextAction = await this.decideNextAction(user, analyzer, options);
      
      switch (nextAction) {
        case 'navigate_to_another':
          const navigated = await analyzer.navigateToRandomGroup();
          if (navigated) {
            Log.info(`[${user.id}]`, 'Navigoval jsem na dal≈°√≠ skupinu');
            // Analyzuj i tu novou skupinu
            await Wait.toSeconds(4, 'Naƒçten√≠ skupiny');
            await analyzer.analyzeCurrentGroup(user.id);
          }
          break;

        case 'scroll_and_read':
          await this.scrollAndReadPosts(user, fbBot);
          break;

        case 'explore_members':
          await this.exploreGroupMembers(user, fbBot);
          break;

        default:
          Log.info(`[${user.id}]`, 'üò¥ ≈Ω√°dn√° dal≈°√≠ akce, konƒç√≠m group_explore');
          break;
      }

      // √öspƒõ≈°n√© dokonƒçen√≠
      await this.logActionSuccess(user, groupInfo);
      
      // Napl√°nuj dal≈°√≠ spu≈°tƒõn√≠ (3-8 minut)
      const nextMinutes = Math.floor(Math.random() * 5) + 3;
      await db.updateActionPlan(user.id, this.actionCode, nextMinutes);

      Log.success(`[${user.id}]`, `Group explore dokonƒçen, dal≈°√≠ za ${nextMinutes} minut`);

      return {
        success: true,
        reason: 'Group explore completed successfully',
        groupInfo: groupInfo,
        nextAction: nextAction,
        nextExecutionInMinutes: nextMinutes
      };

    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba v group_explore: ${err.message}`);
      
      // Napl√°nuj opakov√°n√≠ za krat≈°√≠ dobu p≈ôi chybƒõ (1-3 minuty)
      const retryMinutes = Math.floor(Math.random() * 2) + 1;
      await db.updateActionPlan(user.id, this.actionCode, retryMinutes);

      return {
        success: false,
        reason: err.message,
        retryInMinutes: retryMinutes
      };

    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Najde a naviguje na novou nezn√°mou skupinu z nalezen√Ωch URL
   * Nejprve zkus√≠ pou≈æ√≠t cache, pak naƒçte ze skupinov√©ho feedu
   */
  async navigateToRandomGroup(user, fbBot) {
    try {
      // Pokus o navigaci z cache
      if (await this.navigateFromCache(user, fbBot)) {
        return true;
      }
      
      // Pokud cache je pr√°zdn√°, naƒçti nov√© skupiny ze feedu
      await this.loadGroupsFromFeed(user, fbBot);
      
      // Zkus znovu z cache
      if (await this.navigateFromCache(user, fbBot)) {
        return true;
      }
      
      // Fallback - pou≈æij p≈Øvodn√≠ metodu
      return await this.navigateFromCurrentPage(user, fbBot);

    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba p≈ôi navigaci na novou skupinu: ${err.message}`);
      throw err;
    }
  }

  /**
   * Pokus√≠ se navigovat na skupinu z global cache
   */
  async navigateFromCache(user, fbBot) {
    try {
      if (!global.groupUrlsCache || global.groupUrlsCache.length === 0) {
        return false;
      }
      
      // Vyber n√°hodnou URL z cache
      const randomIndex = Math.floor(Math.random() * global.groupUrlsCache.length);
      const groupUrl = global.groupUrlsCache.splice(randomIndex, 1)[0]; // Odeber z cache
      
      Log.info(`[${user.id}]`, `Naviguji na skupinu z cache: ${groupUrl}`);
      await fbBot.navigateToPage(groupUrl, { waitUntil: 'networkidle2' });
      await Wait.toSeconds(4, 'Naƒçten√≠ skupiny z cache');
      return true;
      
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi navigaci z cache: ${err.message}`);
      return false;
    }
  }

  /**
   * Naƒçte seznam skupin ze skupinov√©ho feedu a ulo≈æ√≠ do cache
   */
  async loadGroupsFromFeed(user, fbBot) {
    try {
      Log.info(`[${user.id}]`, 'Naƒç√≠t√°m skupiny ze feedu...');
      
      // Naviguj na skupinov√Ω feed
      await fbBot.navigateToPage('https://www.facebook.com/groups/feed/', { 
        waitUntil: 'networkidle2' 
      });
      await Wait.toSeconds(5, 'Naƒçten√≠ skupinov√©ho feedu');
      
      // Scrolluj pro naƒçten√≠ v√≠ce skupin
      for (let i = 0; i < 3; i++) {
        await fbBot.page.evaluate(() => {
          window.scrollBy(0, 800);
        });
        await Wait.toSeconds(2, 'Naƒçten√≠ dal≈°√≠ch skupin');
      }
      
      // Extrahuj odkazy na skupiny
      const groupUrls = await fbBot.page.evaluate(() => {
        const links = Array.from(document.querySelectorAll('a[href*="/groups/"]'))
          .map(a => a.href)
          .filter(href => {
            const match = href.match(/facebook\.com\/groups\/([^\/\?&]+)/);
            return match && match[1] !== 'feed';
          });
        
        return [...new Set(links)]; // Unik√°tn√≠ odkazy
      });
      
      // Ulo≈æen√≠ do global cache
      if (!global.groupUrlsCache) {
        global.groupUrlsCache = [];
      }
      
      // P≈ôidej nov√© URLs, kter√© je≈°tƒõ nejsou v cache
      const newUrls = groupUrls.filter(url => !global.groupUrlsCache.includes(url));
      global.groupUrlsCache.push(...newUrls);
      
      Log.info(`[${user.id}]`, `Naƒçteno ${newUrls.length} nov√Ωch skupinov√Ωch URL (celkem v cache: ${global.groupUrlsCache.length})`);
      
    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba p≈ôi naƒç√≠t√°n√≠ ze feedu: ${err.message}`);
    }
  }

  /**
   * Fallback navigace z aktu√°ln√≠ str√°nky (p≈Øvodn√≠ metoda)
   */
  async navigateFromCurrentPage(user, fbBot) {
    try {
      // Z√≠skej anal√Ωzu aktu√°ln√≠ str√°nky vƒçetnƒõ v≈°ech group URL
      const pageAnalysis = await fbBot.pageAnalyzer.analyzeFullPage();
      
      if (!pageAnalysis.links?.groups || pageAnalysis.links.groups.length === 0) {
        throw new Error('Na aktu√°ln√≠ str√°nce nejsou nalezeny ≈æ√°dn√© odkazy na skupiny. Nelze pokraƒçovat v exploration.');
      }
      
      Log.info(`[${user.id}]`, `Nalezeno ${pageAnalysis.links.groups.length} odkaz≈Ø na skupiny`);
      
      // Vyber n√°hodnou skupinu z nalezen√Ωch
      const randomGroupUrl = pageAnalysis.links.groups[Math.floor(Math.random() * pageAnalysis.links.groups.length)];
      
      Log.info(`[${user.id}]`, `Naviguji na novou skupinu: ${randomGroupUrl}`);
      await fbBot.navigateToPage(randomGroupUrl, { waitUntil: 'networkidle2' });
      await Wait.toSeconds(4, 'Naƒçten√≠ nov√© skupiny');
      return true;

    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba p≈ôi navigaci z aktu√°ln√≠ str√°nky: ${err.message}`);
      throw err;
    }
  }

  /**
   * Rozhoduje o dal≈°√≠ aktivitƒõ na z√°kladƒõ kontextu
   */
  async decideNextAction(user, analyzer, options) {
    try {
      // Z√≠skej statistiky u≈æivatele
      const stats = await analyzer.getUserExplorationStats(user.id);
      
      // Rozhodovac√≠ logika
      const actions = ['navigate_to_another', 'scroll_and_read', 'explore_members', 'finish'];
      const weights = [40, 30, 20, 10]; // Procenta pravdƒõpodobnosti

      // Upravuj v√°hy podle kontextu
      if (stats && stats.groups_discovered < 5) {
        weights[0] += 20; // V√≠ce navigace pro nov√© u≈æivatele
      }

      // N√°hodn√Ω v√Ωbƒõr podle vah
      const random = Math.random() * 100;
      let cumulative = 0;
      
      for (let i = 0; i < actions.length; i++) {
        cumulative += weights[i];
        if (random <= cumulative) {
          return actions[i];
        }
      }

      return 'finish';

    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi rozhodov√°n√≠: ${err.message}`);
      return 'finish';
    }
  }

  /**
   * Scrolluje a "ƒçte" p≈ô√≠spƒõvky ve skupinƒõ
   */
  async scrollAndReadPosts(user, fbBot) {
    try {
      Log.info(`[${user.id}]`, 'üìñ Scrolluji a ƒçtu p≈ô√≠spƒõvky...');

      // Simulace ƒçten√≠ - nƒõkolik scroll≈Ø s pauzy
      for (let i = 0; i < 3; i++) {
        await fbBot.page.evaluate(() => {
          window.scrollBy(0, Math.floor(Math.random() * 500) + 300);
        });
        
        await Wait.toSeconds(4, 'Naƒçten√≠ skupiny'); // Pauza na "ƒçten√≠"
      }

      Log.info(`[${user.id}]`, 'Dokonƒçeno ƒçten√≠ p≈ô√≠spƒõvk≈Ø');

    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi ƒçten√≠ p≈ô√≠spƒõvk≈Ø: ${err.message}`);
    }
  }

  /**
   * Prozkoum√°v√° ƒçleny skupiny
   */
  async exploreGroupMembers(user, fbBot) {
    try {
      Log.info(`[${user.id}]`, 'üë• Prozkoum√°v√°m ƒçleny skupiny...');

      // Hled√°n√≠ odkaz≈Ø na ƒçleny pomoc√≠ JavaScript evaluation
      const memberLinks = await fbBot.page.evaluate(() => {
        const links = Array.from(document.querySelectorAll('a[href*="/profile.php"], a[href*="facebook.com/"]:not([href*="/groups/"])'));
        return links.map((link, index) => ({
          index,
          href: link.href,
          text: link.textContent?.trim() || '',
          isVisible: link.offsetParent !== null
        })).filter(link => link.isVisible);
      });
      
      if (memberLinks.length > 0) {
        // Klikni na n√°hodn√Ω profil
        const randomIndex = Math.floor(Math.random() * Math.min(memberLinks.length, 5));
        const selectedLink = memberLinks[randomIndex];
        
        const clickResult = await fbBot.page.evaluate((linkIndex) => {
          const allLinks = document.querySelectorAll('a[href*="/profile.php"], a[href*="facebook.com/"]:not([href*="/groups/"])');
          const targetLink = allLinks[linkIndex];
          if (targetLink && targetLink.offsetParent !== null) {
            targetLink.click();
            return true;
          }
          return false;
        }, selectedLink.index);
        
        if (clickResult) {
          await Wait.toSeconds(6, 'Prohl√©dnut√≠ profilu');
          
          // N√°vrat zpƒõt
          await fbBot.page.goBack();
          await Wait.toSeconds(2, 'N√°vrat zpƒõt');
          
          Log.info(`[${user.id}]`, 'Prozkoum√°n profil ƒçlena');
        }
      }

    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi prozkoum√°v√°n√≠ ƒçlen≈Ø: ${err.message}`);
    }
  }

  /**
   * Loguje √∫spƒõ≈°n√© dokonƒçen√≠ akce
   */
  async logActionSuccess(user, groupInfo) {
    try {
      const logText = `Prozkoum√°na skupina: ${groupInfo.name} (${groupInfo.member_count} ƒçlen≈Ø, ${groupInfo.category || 'nezn√°m√° kategorie'})`;
      
      await db.logAction(user.id, this.actionCode, groupInfo.fb_group_id, logText);
      
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi logov√°n√≠: ${err.message}`);
    }
  }

  /**
   * Kontroluje zda je akce dostupn√° pro u≈æivatele
   */
  async isAvailableForUser(user) {
    try {
      // Group explore je v≈ædy dostupn√° (neinvazivn√≠)
      return true;
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi kontrole dostupnosti: ${err.message}`);
      return false;
    }
  }

  /**
   * Zji≈°≈•uje prioritu akce (ni≈æ≈°√≠ kdy≈æ jsou posting akce dostupn√©)
   */
  async getPriorityForUser(user) {
    try {
      // Z√≠skej dostupn√© akce u≈æivatele
      const actions = await db.getUserActions(user.id);
      const postingActions = actions.filter(action => 
        action.action_code.startsWith('post_utio_') || 
        action.action_code === 'quote_post'
      );

      // Pokud jsou posting akce dostupn√©, sni≈æ prioritu
      if (postingActions.length > 0) {
        return 1; // N√≠zk√° priorita
      }

      return 5; // Standardn√≠ priorita kdy≈æ nejsou posting akce
      
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi v√Ωpoƒçtu priority: ${err.message}`);
      return 5;
    }
  }
}

// Export singleton instance
export const groupExploreAction = new GroupExploreAction();