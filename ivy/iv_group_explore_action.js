/**
 * N√°zev souboru: iv_group_explore_action.js
 * Um√≠stƒõn√≠: ~/ivy/iv_group_explore_action.js
 *
 * Popis: Implementace akce group_explore pro prozkoum√°v√°n√≠ FB skupin
 * Neinvazivn√≠ aktivita, kter√° se opakuje nekoneƒçnƒõ pokud nejsou dostupn√© posting akce
 */

import { Log } from './libs/iv_log.class.js';
import { FBGroupAnalyzer } from './iv_fb_group_analyzer.js';
import { db } from './iv_sql.js';
import { Wait } from './libs/iv_wait.class.js';
import { GroupCache } from './libs/iv_group_cache.class.js';

export class GroupExploreAction {
  constructor() {
    this.actionCode = 'group_explore';
    this.isRunning = false;
  }

  /**
   * Hlavn√≠ v√Ωkonn√° funkce akce group_explore
   */
  async execute(user, fbBot, options = {}) {
    if (this.isRunning) {
      Log.info(`[${user.id}]`, 'Group explore u≈æ bƒõ≈æ√≠, p≈ôeskakuji...');
      return { success: false, reason: 'Already running' };
    }

    this.isRunning = true;

    try {
      Log.info(`[${user.id}]`, 'Spou≈°t√≠m group_explore akci...');

      if (!fbBot || !fbBot.page || fbBot.page.isClosed()) {
        throw new Error('FBBot nen√≠ dostupn√Ω');
      }

      // P≈ôen√©st FB z√°lo≈æku na pop≈ôed√≠
      await fbBot.bringToFront();

      // V≈ædy navigujeme na prvn√≠ skupinu
      const navigated = await this.navigateToRandomGroup(user, fbBot);
      if (!navigated) {
        throw new Error('Nepoda≈ôilo se navigovat do ≈æ√°dn√© skupiny');
      }

      // Inicializace analyz√°toru
      const analyzer = new FBGroupAnalyzer(fbBot.page);

      // Anal√Ωza souƒçasn√© skupiny
      const groupInfo = await analyzer.analyzeCurrentGroup(user.id);
      if (!groupInfo) {
        throw new Error('Nepoda≈ôilo se analyzovat skupinu');
      }

      Log.info(`[${user.id}]`, `Analyzov√°na skupina: ${groupInfo.name} (${groupInfo.member_count} ƒçlen≈Ø)`);

      // N√°hodn√© ƒçek√°n√≠ pro simulaci lidsk√©ho chov√°n√≠
      await Wait.toSeconds(8, 'Simulace lidsk√©ho chov√°n√≠');

      // Rozhodnut√≠ o dal≈°√≠ aktivitƒõ
      const nextAction = await this.decideNextAction(user, analyzer, options);
      
      switch (nextAction) {
        case 'scroll_and_read':
          await this.scrollAndReadPosts(user, fbBot);
          break;

        case 'explore_members':
          await this.exploreGroupMembers(user, fbBot);
          break;

        case 'finish_session':
          Log.info(`[${user.id}]`, 'üèÅ Session dokonƒçena, pl√°nuji dal≈°√≠ group_explore za del≈°√≠ ƒças');
          // Napl√°nuj podle parametr≈Ø akce z datab√°ze (3-8 minut default)
          const actionDef = await db.safeQueryFirst('actions.getDefinitionByCode', [this.actionCode]);
          const minMinutes = actionDef?.min_minutes || 3;
          const maxMinutes = actionDef?.max_minutes || 8;
          const sessionBreakMinutes = Math.floor(Math.random() * (maxMinutes - minMinutes + 1)) + minMinutes;
          await db.updateActionPlan(user.id, this.actionCode, sessionBreakMinutes);
          
          return {
            success: true,
            reason: 'Exploration session completed',
            groupInfo: groupInfo,
            nextAction: nextAction,
            nextExecutionInMinutes: sessionBreakMinutes
          };

        default:
          Log.info(`[${user.id}]`, 'üò¥ ≈Ω√°dn√° dal≈°√≠ akce, konƒç√≠m group_explore');
          break;
      }

      // √öspƒõ≈°n√© dokonƒçen√≠
      await this.logActionSuccess(user, groupInfo);
      
      // Kr√°tk√° pauza mezi skupinami (max 30s)
      const nextSeconds = Math.floor(Math.random() * 25) + 5; // 5-30s
      await db.updateActionPlan(user.id, this.actionCode, nextSeconds / 60); // p≈ôevod na minuty

      Log.success(`[${user.id}]`, `Group explore dokonƒçen, dal≈°√≠ za ${nextMinutes} minut`);

      return {
        success: true,
        reason: 'Group explore completed successfully',
        groupInfo: groupInfo,
        nextAction: nextAction,
        nextExecutionInMinutes: nextMinutes
      };

    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba v group_explore: ${err.message}`);
      
      // Napl√°nuj opakov√°n√≠ za krat≈°√≠ dobu p≈ôi chybƒõ (1-3 minuty)
      const retryMinutes = Math.floor(Math.random() * 2) + 1;
      await db.updateActionPlan(user.id, this.actionCode, retryMinutes);

      return {
        success: false,
        reason: err.message,
        retryInMinutes: retryMinutes
      };

    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Najde a naviguje na skupinu pro zaƒç√°tek pr≈Øzkumu
   * Pou≈æ√≠v√° cache nebo naƒçte ze skupinov√©ho feedu
   */
  async navigateToRandomGroup(user, fbBot) {
    try {
      // Obƒças (20% ≈°ance) naƒçti nov√© skupiny ze feedu i kdy≈æ cache nen√≠ pr√°zdn√°
      const shouldRefreshFeed = Math.random() < 0.2;
      if (shouldRefreshFeed) {
        Log.info(`[${user.id}]`, 'üîÑ Obnovuji skupiny z discover (n√°hodn√° obnova)');
        await this.loadGroupsFromFeed(user, fbBot);
      }
      
      // Pokus o navigaci z cache
      if (await this.navigateFromCache(user, fbBot)) {
        return true;
      }
      
      // Pokud cache je pr√°zdn√°, naƒçti nov√© skupiny z discover
      await this.loadGroupsFromFeed(user, fbBot);
      
      // Zkus znovu z cache
      if (await this.navigateFromCache(user, fbBot)) {
        return true;
      }
      
      throw new Error('Nepoda≈ôilo se naƒç√≠st ≈æ√°dn√© skupiny ani z cache ani z discover');

    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba p≈ôi navigaci na skupinu: ${err.message}`);
      throw err;
    }
  }

  /**
   * Pokus√≠ se navigovat na skupinu z cache
   */
  async navigateFromCache(user, fbBot) {
    try {
      const groupCache = GroupCache.getInstance();
      
      if (groupCache.isEmpty()) {
        return false;
      }
      
      // Vyber n√°hodnou URL z cache
      const groupUrl = groupCache.getRandomUrl();
      if (!groupUrl) {
        return false;
      }
      
      Log.info(`[${user.id}]`, `Naviguji na skupinu z cache: ${groupUrl}`);
      await fbBot.navigateToPage(groupUrl, { waitUntil: 'networkidle2' });
      await Wait.toSeconds(4, 'Naƒçten√≠ skupiny z cache');
      return true;
      
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi navigaci z cache: ${err.message}`);
      return false;
    }
  }

  /**
   * Naƒçte seznam skupin ze skupinov√©ho feedu a ulo≈æ√≠ do cache
   */
  async loadGroupsFromFeed(user, fbBot) {
    try {
      Log.info(`[${user.id}]`, 'Naƒç√≠t√°m skupiny z discover...');
      
      // Naviguj na skupinov√Ω discover
      await fbBot.navigateToPage('https://www.facebook.com/groups/discover', { 
        waitUntil: 'networkidle2' 
      });
      await Wait.toSeconds(5, 'Naƒçten√≠ discover str√°nky');
      
      // Scrolluj pro naƒçten√≠ v√≠ce skupin
      for (let i = 0; i < 3; i++) {
        await fbBot.page.evaluate(() => {
          window.scrollBy(0, 800);
        });
        await Wait.toSeconds(2, 'Naƒçten√≠ dal≈°√≠ch skupin');
      }
      
      // Extrahuj odkazy na skupiny
      const groupUrls = await fbBot.page.evaluate(() => {
        const links = Array.from(document.querySelectorAll('a[href*="/groups/"]'))
          .map(a => a.href)
          .filter(href => {
            const match = href.match(/facebook\.com\/groups\/([^\/\?&]+)/);
            return match && match[1] !== 'feed';
          });
        
        return [...new Set(links)]; // Unik√°tn√≠ odkazy
      });
      
      const groupCache = GroupCache.getInstance();
      
      // Extrahuj v≈°echna FB ID najednou
      const urlsWithIds = groupUrls.map(url => {
        const fbIdMatch = url.match(/facebook\.com\/groups\/([^\/\?&]+)/);
        return {
          url: url,
          fbId: fbIdMatch && fbIdMatch[1] ? fbIdMatch[1] : null
        };
      }).filter(item => item.fbId !== null);
      
      // Jeden SQL dotaz pro v≈°echna ID najednou
      const allFbIds = urlsWithIds.map(item => item.fbId);
      let existingGroups = [];
      
      if (allFbIds.length > 0) {
        // P≈ô√≠m√Ω p≈ô√≠stup k datab√°zi pro dynamick√Ω SQL s IN klauzul√≠
        const { pool } = await import('./iv_sql.js');
        const placeholders = allFbIds.map(() => '?').join(',');
        // Vyber skupiny kter√© nemaj√≠ member_count nebo byly vidƒõny p≈ôed v√≠ce ne≈æ 24 hodinami
        const sql = `SELECT * FROM fb_groups WHERE fb_id IN (${placeholders}) 
                     AND member_count IS NOT NULL 
                     AND last_seen > NOW() - INTERVAL 24 HOUR`;
        const [rows] = await pool.execute(sql, allFbIds);
        existingGroups = rows;
      }
      
      // Vytvo≈ô Set ID skupin, kter√© nepot≈ôebuj√≠ aktualizaci
      const skipFbIds = new Set(existingGroups.map(group => group.fb_id));
      
      // Filtruj skupiny kter√© pot≈ôebuj√≠ prozkoum√°n√≠ (nezn√°m√© nebo star√©)
      const urlsToExplore = urlsWithIds
        .filter(item => !skipFbIds.has(item.fbId))
        .map(item => item.url);
      
      const skipCount = urlsWithIds.length - urlsToExplore.length;
      
      // Do cache p≈ôidej skupiny k prozkoum√°n√≠
      const addedCount = groupCache.addUrls(urlsToExplore);
      
      Log.info(`[${user.id}]`, `Z discover: ${groupUrls.length} celkem, ${skipCount} ned√°vno vidƒõn√Ωch p≈ôeskoƒçeno, ${addedCount} p≈ôid√°no do cache`);
      
    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba p≈ôi naƒç√≠t√°n√≠ z discover: ${err.message}`);
    }
  }

  /**
   * Rozhoduje o dal≈°√≠ aktivitƒõ v r√°mci pr≈Øzkumu
   * Pou≈æ√≠v√° v√°hy, po pou≈æit√≠ akce se v√°ha nastav√≠ na 0
   */
  async decideNextAction(user, analyzer, options) {
    try {
      // Inicializace session tracking
      if (!global.exploreSession) {
        global.exploreSession = {};
      }
      if (!global.exploreSession[user.id]) {
        global.exploreSession[user.id] = {
          actionWeights: {
            scroll_and_read: 60,
            explore_members: 30,
            finish: 10
          },
          explorationCount: 0
        };
      }
      
      const session = global.exploreSession[user.id];
      
      // Zv√Ω≈°en√≠ poƒçtu pr≈Øzkum≈Ø
      session.explorationCount++;
      
      // Dynamick√Ω limit podle biorytm≈Ø (12-20 podle n√°lady a energie)
      const maxExplorations = await this.calculateDynamicExplorationCount(user.id);
      if (session.explorationCount >= maxExplorations) {
        Log.info(`[${user.id}]`, `Dosa≈æen limit pr≈Øzkum≈Ø (${session.explorationCount}/${maxExplorations}), ukonƒçuji session`);
        delete global.exploreSession[user.id]; // Reset pro p≈ô√≠≈°t√≠ session
        return 'finish_session';
      }
      
      // Vytvo≈ô seznam dostupn√Ωch akc√≠ s jejich v√°hami
      const availableActions = [];
      for (const [action, weight] of Object.entries(session.actionWeights)) {
        if (weight > 0) {
          availableActions.push({ action, weight });
        }
      }
      
      // Pokud ≈æ√°dn√© akce nejsou dostupn√©, ukonƒçit
      if (availableActions.length === 0) {
        return 'finish';
      }
      
      // Weighted random selection
      const totalWeight = availableActions.reduce((sum, a) => sum + a.weight, 0);
      const random = Math.random() * totalWeight;
      let cumulative = 0;
      
      for (const activityOption of availableActions) {
        cumulative += activityOption.weight;
        if (random <= cumulative) {
          // Nastav v√°hu na 0 po pou≈æit√≠ (kromƒõ finish)
          if (activityOption.action !== 'finish') {
            session.actionWeights[activityOption.action] = 0;
          }
          return activityOption.action;
        }
      }

      return 'finish';

    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi rozhodov√°n√≠: ${err.message}`);
      return 'finish';
    }
  }

  /**
   * Scrolluje a "ƒçte" p≈ô√≠spƒõvky ve skupinƒõ
   */
  async scrollAndReadPosts(user, fbBot) {
    try {
      Log.info(`[${user.id}]`, 'üìñ Scrolluji a ƒçtu p≈ô√≠spƒõvky...');

      // Simulace ƒçten√≠ - nƒõkolik scroll≈Ø s pauzy
      for (let i = 0; i < 3; i++) {
        await fbBot.page.evaluate(() => {
          window.scrollBy(0, Math.floor(Math.random() * 500) + 300);
        });
        
        await Wait.toSeconds(4, 'Naƒçten√≠ skupiny'); // Pauza na "ƒçten√≠"
      }

      Log.info(`[${user.id}]`, 'Dokonƒçeno ƒçten√≠ p≈ô√≠spƒõvk≈Ø');

    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi ƒçten√≠ p≈ô√≠spƒõvk≈Ø: ${err.message}`);
    }
  }

  /**
   * Prozkoum√°v√° ƒçleny skupiny
   */
  async exploreGroupMembers(user, fbBot) {
    try {
      Log.info(`[${user.id}]`, 'üë• Prozkoum√°v√°m ƒçleny skupiny...');

      // Hled√°n√≠ odkaz≈Ø na ƒçleny pomoc√≠ JavaScript evaluation
      const memberLinks = await fbBot.page.evaluate(() => {
        const links = Array.from(document.querySelectorAll('a[href*="/profile.php"], a[href*="facebook.com/"]:not([href*="/groups/"])'));
        return links.map((link, index) => ({
          index,
          href: link.href,
          text: link.textContent?.trim() || '',
          isVisible: link.offsetParent !== null
        })).filter(link => link.isVisible);
      });
      
      if (memberLinks.length > 0) {
        // Klikni na n√°hodn√Ω profil
        const randomIndex = Math.floor(Math.random() * Math.min(memberLinks.length, 5));
        const selectedLink = memberLinks[randomIndex];
        
        const clickResult = await fbBot.page.evaluate((linkIndex) => {
          const allLinks = document.querySelectorAll('a[href*="/profile.php"], a[href*="facebook.com/"]:not([href*="/groups/"])');
          const targetLink = allLinks[linkIndex];
          if (targetLink && targetLink.offsetParent !== null) {
            targetLink.click();
            return true;
          }
          return false;
        }, selectedLink.index);
        
        if (clickResult) {
          await Wait.toSeconds(6, 'Prohl√©dnut√≠ profilu');
          
          // N√°vrat zpƒõt
          await fbBot.page.goBack();
          await Wait.toSeconds(2, 'N√°vrat zpƒõt');
          
          Log.info(`[${user.id}]`, 'Prozkoum√°n profil ƒçlena');
        }
      }

    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi prozkoum√°v√°n√≠ ƒçlen≈Ø: ${err.message}`);
    }
  }

  /**
   * Loguje √∫spƒõ≈°n√© dokonƒçen√≠ akce
   */
  async logActionSuccess(user, groupInfo) {
    try {
      const logText = `Prozkoum√°na skupina: ${groupInfo.name} (${groupInfo.member_count} ƒçlen≈Ø, ${groupInfo.category || 'nezn√°m√° kategorie'})`;
      
      await db.logAction(user.id, this.actionCode, groupInfo.fb_id || null, logText);
      
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi logov√°n√≠: ${err.message}`);
    }
  }

  /**
   * Kontroluje zda je akce dostupn√° pro u≈æivatele
   */
  async isAvailableForUser(user) {
    try {
      // Group explore je v≈ædy dostupn√° (neinvazivn√≠)
      return true;
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi kontrole dostupnosti: ${err.message}`);
      return false;
    }
  }

  /**
   * Vypoƒç√≠t√° dynamick√Ω poƒçet pr≈Øzkum≈Ø podle biorytm≈Ø u≈æivatele
   * Z√°kladn√≠ rozsah: 12-20 skupin, upraveno podle n√°lady a energie
   */
  async calculateDynamicExplorationCount(userId) {
    try {
      // Z√≠skej behavioral profil u≈æivatele
      const profile = await db.safeQueryFirst('behavioralProfiles.getUserProfile', [userId]);
      
      if (!profile) {
        Log.warn(`[${userId}]`, 'Chyb√≠ behavioral profil, pou≈æ√≠v√°m st≈ôedn√≠ hodnotu 16');
        return 16; // St≈ôedn√≠ hodnota mezi 12-20
      }

      // Z√°kladn√≠ rozsah: 12-20 skupin
      let baseCount = 16; // St≈ôedn√≠ hodnota
      
      // √öprava podle energie (0.6-1.0 typick√Ω rozsah)
      const energyMultiplier = (profile.energy_level - 0.5) * 2; // -1 a≈æ +1
      baseCount += Math.round(energyMultiplier * 2); // ¬±2 skupiny podle energie
      
      // √öprava podle n√°lady
      const moodAdjustments = {
        'energetic': +3,
        'focused': +2, 
        'happy': +1,
        'neutral': 0,
        'serious': -1,
        'distracted': -2,
        'tired': -3
      };
      
      const moodAdjustment = moodAdjustments[profile.base_mood] || 0;
      baseCount += moodAdjustment;
      
      // √öprava podle pozornosti (45-165s typick√Ω rozsah)
      if (profile.attention_span < 60) {
        baseCount -= 2; // Kr√°tk√° pozornost = m√©nƒõ skupin
      } else if (profile.attention_span > 120) {
        baseCount += 2; // Dlouh√° pozornost = v√≠ce skupin
      }
      
      // Zajisti rozsah 12-20
      const finalCount = Math.max(12, Math.min(20, baseCount));
      
      Log.info(`[${userId}]`, `üß† Biorytmy: energy=${profile.energy_level.toFixed(2)}, mood=${profile.base_mood}, attention=${profile.attention_span}s ‚Üí ${finalCount} skupin`);
      
      return finalCount;
      
    } catch (err) {
      await Log.error(`[${userId}]`, `Chyba p≈ôi v√Ωpoƒçtu dynamick√©ho poƒçtu: ${err.message}`);
      return 16; // Fallback na st≈ôedn√≠ hodnotu
    }
  }

  /**
   * Zji≈°≈•uje prioritu akce (ni≈æ≈°√≠ kdy≈æ jsou posting akce dostupn√©)
   */
  async getPriorityForUser(user) {
    try {
      // Z√≠skej dostupn√© akce u≈æivatele
      const actions = await db.getUserActions(user.id);
      const postingActions = actions.filter(action => 
        action.action_code.startsWith('post_utio_') || 
        action.action_code === 'quote_post'
      );

      // Pokud jsou posting akce dostupn√©, sni≈æ prioritu
      if (postingActions.length > 0) {
        return 1; // N√≠zk√° priorita
      }

      return 5; // Standardn√≠ priorita kdy≈æ nejsou posting akce
      
    } catch (err) {
      await Log.warn(`[${user.id}]`, `Chyba p≈ôi v√Ωpoƒçtu priority: ${err.message}`);
      return 5;
    }
  }
}

// Export singleton instance
export const groupExploreAction = new GroupExploreAction();