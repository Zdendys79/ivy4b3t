/**
 * N√°zev souboru: post_utio_gv.action.js
 * Um√≠stƒõn√≠: ~/ivy/actions/post_utio_gv.action.js
 *
 * Popis: UTIO post do vlastn√≠ch skupin (GV)
 * - Implementuje BaseAction
 * - Pouze jedna odpovƒõdnost: post UTIO do vlastn√≠ch skupin
 * - ≈Ω√°dn√© fallbacky
 */

import { BaseAction } from '../libs/base_action.class.js';
import { Log } from '../libs/iv_log.class.js';
import { Wait } from '../libs/iv_wait.class.js';
import { getAvailableGroupsForUser, blockUserGroup } from '../user_group_escalation.js';

export class PostUtioGvAction extends BaseAction {
  constructor() {
    super('post_utio_gv');
  }

  /**
   * Definuje po≈æadavky akce na slu≈æby
   */
  getRequirements() {
    return {
      needsFB: true,
      needsUtio: true
    };
  }

  /**
   * Ovƒõ≈ô√≠ p≈ôipravenost akce
   */
  async verifyReadiness(user, context) {
    const { fbBot } = context;
    
    if (!fbBot) {
      return {
        ready: false,
        reason: 'Chyb√≠ FBBot instance',
        critical: true
      };
    }

    // Zkontroluj dostupnost skupin typu GV
    const group = await this.db.getSingleAvailableGroup(user.id, 'GV');
    if (!group) {
      return {
        ready: false,
        reason: '≈Ω√°dn√© dostupn√© skupiny typu GV',
        critical: false
      };
    }

    return {
      ready: true,
      reason: 'Akce je p≈ôipravena'
    };
  }

  /**
   * Proveden√≠ UTIO post do vlastn√≠ skupiny
   */
  async execute(user, context, pickedAction) {
    const { fbBot, utioBot } = context;
    const joinActionCode = 'join_group_gv';

    try {
      // Z√≠skej dostupnou skupinu typu GV
      const group = await this.db.getSingleAvailableGroup(user.id, 'GV');
      if (!group) {
        await Log.warn(`[${user.id}]`, '≈Ω√°dn√© dostupn√© skupiny typu GV');
        return false;
      }

      Log.info(`[${user.id}]`, `Vybr√°na vlastn√≠ skupina: ${group.name} (${group.fb_id})`);

      // Otev≈ôi skupinu
      await fbBot.openGroup(group);
      await Wait.toSeconds(1, 'Po otev≈ôen√≠ skupiny');

      // Rychl√° kontrola na "Obsah teƒè nen√≠ dostupn√Ω"
      const pageContent = await fbBot.page.evaluate(() => document.body.textContent);
      if (pageContent.includes('Obsah teƒè nen√≠ dostupn√Ω')) {
        await Log.warn(`[${user.id}]`, `Skupina ${group.name} je trvale nedostupn√°`);
        await blockUserGroup(user.id, group.id, 'Obsah trvale nedostupn√Ω - skupina neexistuje');
        return false;
      }

      // Inicializuj analyzer
      fbBot.initializeAnalyzer();
      await Wait.toSeconds(1, 'Po inicializaci analyz√°toru');

      // Zkus kliknout na "Napi≈°te nƒõco"
      Log.info(`[${user.id}]`, 'Pokou≈°√≠m se kliknout na "Napi≈°te nƒõco"...');
      const postClicked = await fbBot.pageAnalyzer.clickElementWithText('Napi≈°te nƒõco', {
        matchType: 'startsWith',
        scrollIntoView: false,
        waitAfterClick: true,
        naturalDelay: true
      });

      if (postClicked) {
        Log.info(`[${user.id}]`, '√öspƒõ≈°nƒõ kliknuto na "Napi≈°te nƒõco", pokraƒçuji s publikac√≠...');
        return await this.performDirectPublication(user, fbBot, utioBot, group);
      }

      // Pokud nen√≠ "Napi≈°te nƒõco", zkus "Diskuze" nejd≈ô√≠v
      Log.info(`[${user.id}]`, '"Napi≈°te nƒõco" nenalezeno, zkou≈°√≠m "Diskuze"...');
      
      const discussionTexts = ['Diskuze', 'Discussion', 'Diskuse'];
      let discussionWorked = false;
      
      for (const discussionText of discussionTexts) {
        const canDiscuss = await fbBot.pageAnalyzer.clickElementWithText(discussionText, {
          matchType: 'contains',
          scrollIntoView: false,
          waitAfterClick: true,
          naturalDelay: true
        });
        
        if (canDiscuss) {
          Log.info(`[${user.id}]`, '√öspƒõ≈°nƒõ kliknuto na "Diskuze", zkou≈°√≠m "Napi≈°te nƒõco" znovu...');
          await Wait.toSeconds(3, 'Po kliknut√≠ na Diskuze');
          
          // Po kliknut√≠ na diskuze zkus "Napi≈°te nƒõco" znovu
          const postClickedAfterDiscussion = await fbBot.pageAnalyzer.clickElementWithText('Napi≈°te nƒõco', {
            matchType: 'startsWith',
            scrollIntoView: false,
            waitAfterClick: true,
            naturalDelay: true
          });
          
          if (postClickedAfterDiscussion) {
            Log.info(`[${user.id}]`, '"Napi≈°te nƒõco" funguje po p≈ôechodu do diskuze!');
            return await this.performDirectPublication(user, fbBot, utioBot, group);
          }
          discussionWorked = true;
          break;
        }
      }
      
      // Pouze pokud diskuze nefunguje, zkus "P≈ôidat se ke skupinƒõ" jako posledn√≠ mo≈ænost
      if (!discussionWorked) {
        Log.info(`[${user.id}]`, '"Diskuze" nenalezena, zkou≈°√≠m "P≈ôidat se ke skupinƒõ" jako posledn√≠ mo≈ænost...');
        
        const joinTexts = ['P≈ôidat se ke skupinƒõ', 'Join Group', 'P≈ôipojit se'];
        for (const joinText of joinTexts) {
          const canJoin = await fbBot.pageAnalyzer.clickElementWithText(joinText, {
            matchType: 'contains',
            scrollIntoView: false,
            waitAfterClick: false,
            naturalDelay: false,
            dryRun: true
          });
          
          if (canJoin) {
            // Zkontroluj ned√°vn√Ω join pokus
            const recentJoin = await this.db.getRecentJoinGroupAction(user.id, joinActionCode);
            if (recentJoin) {
              Log.info(`[${user.id}]`, '‚è∞ Ji≈æ byla odesl√°na ≈æ√°dost o ƒçlenstv√≠ v posledn√≠ch 8 hodin√°ch');
              return true;
            }

            Log.info(`[${user.id}]`, `Pokou≈°√≠m se p≈ôidat do skupiny ${group.name} jako posledn√≠ mo≈ænost...`);
            const joinResult = await fbBot.joinToGroup();
            
            if (joinResult) {
              await Wait.toSeconds(4, 'Po p≈ôid√°n√≠ do skupiny');
              
              // Zapi≈° do action_log (pro 8h limit)
              await this.logAction(user, group.id, `≈Ω√°dost o ƒçlenstv√≠: ${group.name}`);
              
              // Zapi≈° do user_groups (pro vztah u≈æivatel-skupina)
              await this.db.insertUserGroupMembership(user.id, group.id, `≈Ω√°dost o ƒçlenstv√≠: ${group.name}`);
              
              Log.success(`[${user.id}]`, `≈Ω√°dost o ƒçlenstv√≠ odesl√°na do ${group.name}`);
              return true;
            } else {
              await blockUserGroup(user.id, group.id, 'Failed to click join button');
              return false;
            }
          }
        }
      }

      // ≈Ω√°dn√© dostupn√© akce
      await Log.warn(`[${user.id}]`, `Skupina ${group.name} nem√° dostupn√© akce`);
      await blockUserGroup(user.id, group.id, 'Skupina neobsahuje pot≈ôebn√© elementy pro interakci');
      return false;

    } catch (err) {
      await Log.error(`[${user.id}]`, `Chyba p≈ôi UTIO post GV: ${err.message}`);
      return false;
    }
  }

  /**
   * P≈ô√≠m√° publikace - editor je u≈æ otev≈ôen√Ω
   */
  async performDirectPublication(user, fbBot, utioBot, group) {
    Log.info(`[${user.id}]`, `üìù Editor je otev≈ôen√Ω, publikuji do vlastn√≠ skupiny ${group.name}...`);
    
    try {
      // Z√≠skej zpr√°vu z UTIO a publikuj
      // TODO: Implementovat pasteMsg bez fallback mechanism≈Ø
      const error = new Error('support.pasteMsg() byla odstranƒõna kv≈Øli fallback mechanism≈Øm. Nutn√© p≈ôepsat bez fallback≈Ø.');
      await Log.error(`[${user.id}]`, error);
      throw error;
      if (!message) {
        await Log.warn(`[${user.id}]`, '‚ùå Publikace selhala (pasteMsg vr√°tilo false)');
        return false;
      }

      await this.logAction(user, group.id, `Post do vlastn√≠ skupiny: ${group.name}`);
      // TODO: Implementovat updatePostStats bez fallback mechanism≈Ø
      Log.info(`[${user.id}]`, 'TODO: updatePostStats() byla odstranƒõna kv≈Øli fallback mechanism≈Øm.');
      Log.success(`[${user.id}]`, `√öspƒõ≈°nƒõ publikov√°no do vlastn√≠ skupiny ${group.name}!`);
      return true;

    } catch (err) {
      await Log.error(`[${user.id}]`, `‚ùå Chyba p≈ôi p≈ô√≠m√© publikaci: ${err.message}`);
      return false;
    }
  }
}