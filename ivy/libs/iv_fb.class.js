// iv_fb.class.js ‚Äì Refaktorovan√° verze

import { Log } from './iv_log.class.js';
import { PageAnalyzer } from './iv_page_analyzer.class.js';
import { getHumanBehavior } from '../iv_human_behavior_advanced.js';
import { db } from '../iv_sql.js';
import * as fbSupport from '../iv_fb_support.js';
import { getAllConfig } from '../iv_config.js';
import { getIvyConfig } from './iv_config.class.js';

const config = getIvyConfig();

import { Wait } from './iv_wait.class.js';

export class FBBot {
  constructor(context, userId = null, disableAnalysis = false) {
    this.context = context;
    this.page = null;
    this.newThingElement = null;
    this.discussionElement = null;
    this.joinGroupElement = null;
    this.isInitialized = false;
    this.pageAnalyzer = null;
    this.userId = userId;
    this.disableAnalysis = disableAnalysis;
    this.humanBehavior = null;
  }

  /**
   * Inicializuje FBBot - vytvo≈ô√≠ novou str√°nku a nastav√≠ z√°kladn√≠ konfigurace
   * @returns {Promise<boolean>} True pokud bylo √∫spƒõ≈°n√©
   */
  async init() {
    try {
      if (this.isInitialized) {
        await Log.warn('[FB]', 'FBBot u≈æ je inicializov√°n');
        return true;
      }

      if (!this.context) {
        await Log.error('[FB]', 'Context nen√≠ k dispozici pro inicializaci');
        return false;
      }

      this.page = await this.context.newPage();

      if (!this.page) {
        await Log.error('[FB]', 'Nepoda≈ôilo se vytvo≈ôit novou str√°nku');
        return false;
      }

      // Nastaven√≠ timeoutu pro navigaci
      this.page.setDefaultNavigationTimeout(config.fb_page_load_timeout);

      // Nastaven√≠ user-agent a viewport
      await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');

      // Detekce a zav√≠r√°n√≠ crash dialog≈Ø je nyn√≠ ≈ôe≈°eno spou≈°tƒõc√≠m argumentem prohl√≠≈æeƒçe.

      this.isInitialized = true;
      return true;

    } catch (err) {
      await Log.error('[FB] init', err);
      this.page = null;
      this.isInitialized = false;
      return false;
    }
  }

  async initializeAnalyzer() {
    if (this.disableAnalysis) {
      Log.info('[FB]', 'Anal√Ωza str√°nek je zak√°z√°na (UI re≈æim)');
      return;
    }
    
    if (this.page && !this.page.isClosed()) {
      this.pageAnalyzer = new PageAnalyzer(this.page);
      
      // ≈Ω√ÅDN√â automatick√© spou≈°tƒõn√≠ anal√Ωz!
      // Anal√Ωzy se budou spou≈°tƒõt POUZE na vy≈æ√°d√°n√≠ pomoc√≠ await
      
      Log.success('[FB]', 'PageAnalyzer inicializov√°n a elementy nalezeny');
      return true;
    }
    await Log.warn('[DIAGNOSTIC]', 'PageAnalyzer could not be initialized (page not ready).');
    return false;
  }
  async bringToFront() {
    if (!this.isReady()) {
      await Log.error('[FB]', 'FBBot nen√≠ p≈ôipraven pro bringToFront');
      return false;
    }

    try {
      await this.page.bringToFront();
      return true;
    } catch (err) {
      await Log.error('[FB] bringToFront', err);
      return false;
    }
  }

  async screenshot(name) {
    if (!this.isReady()) {
      await Log.error('[FB]', 'FBBot nen√≠ p≈ôipraven pro screenshot');
      return false;
    }

    try {
      const filename = `errors/${name}_${Date.now()}.png`;
      await this.page.screenshot({ path: filename });
      Log.info(`[FB] Screenshot ulo≈æen: ${filename}`);
      return true;
    } catch (err) {
      await Log.error('[FB] screenshot', err);
      return false;
    }
  }


  // üß© Vnit≈ôn√≠ helpery pro zjednodu≈°en√≠

  /**
   * ƒåek√° na <span> s textem podle dan√© strategie (nap≈ô. startsWith)
   * Vhodn√© pro pou≈æit√≠ v Promise.race().
   */
  async _waitForText(text, options = {}) {
    try {
      if (!this.page || !this.page.waitForSelector) {
        await Log.warn('[FB] _waitForText selhalo: this.page nen√≠ p≈ôipraven.');
        return null;
      }

      const { match = 'startsWith', timeout = 5000 } = options;

      let xpath;
      if (match === 'startsWith') {
        xpath = `//span[starts-with(normalize-space(string(.)), "${text}")]`;
      } else if (match === 'exact') {
        xpath = `//span[normalize-space(string(.)) = "${text}"]`;
      } else {
        xpath = `//span[contains(normalize-space(string(.)), "${text}")]`;
      }

      const selector = `xpath/${xpath}`;
      return await this.page.waitForSelector(selector, { timeout });
    } catch (err) {
      await Log.warn('[FB] _waitForText selhalo:', err);
      return null;
    }
  }

  async _checkTexts(text1, text2) {
    if (this.disableAnalysis) {
      return false; // V UI re≈æimu neprov√°dƒõt kontroly
    }
    
    await this.ensureAnalyzer();

    const exists1 = await this.pageAnalyzer.elementExists(text1);
    const exists2 = await this.pageAnalyzer.elementExists(text2);
    return exists1 && exists2;
  }

  async _clickByText(text, timeout = 1000) {
    if (!this.pageAnalyzer) {
      await Log.warn('[FB]', 'PageAnalyzer nen√≠ dostupn√Ω, pou≈æ√≠v√°m fallback');
      const buttons = await fbSupport.findByText(this.page, text, { timeout, match: 'exact' });
      if (!buttons || buttons.length === 0) {
        throw new Error(`Tlaƒç√≠tko "${text}" nenalezeno.`);
      }
      await buttons[0].click();
      Log.info(`[FB] Kliknuto na "${text}".`);
      return true;
    }

    const success = await this.pageAnalyzer.clickElementWithText(text, {
      timeout: timeout,
      matchType: 'exact',
      naturalDelay: true
    });

    if (!success) {
      throw new Error(`Tlaƒç√≠tko "${text}" nenalezeno nebo nelze kliknout.`);
    }

    Log.info(`[FB] Kliknuto na "${text}" pomoc√≠ PageAnalyzer.`);
    return true;
  }

  async _typeLikeHuman(text, context = 'neutral') {
    // Pokud m√°me userId, pou≈æij pokroƒçil√© chov√°n√≠
    if (this.userId) {
      if (!this.humanBehavior) {
        this.humanBehavior = await getHumanBehavior(this.userId);
      }

      await this.humanBehavior.typeLikeHuman(this.page, text, context);
      return;
    }

    // Kritick√° chyba - userId je povinn√Ω pro typing
    const error = new Error('userId je povinn√Ω pro _typeLikeHuman funkci');
    await Log.error(`[FB]`, error);
    throw error;
  }

  async _verifyTargetGroup(targetGroup) {
    try {
      const currentUrl = this.page.url();

      // Kontrola, zda jsme ve spr√°vn√© skupinƒõ
      if (!currentUrl.includes(targetGroup.fb_id)) {
        return {
          valid: false,
          reason: `Nejsme ve spr√°vn√© skupinƒõ. Oƒçek√°v√°no: ${targetGroup.fb_id}, aktu√°ln√≠ URL: ${currentUrl}`
        };
      }

      // Anal√Ωza skupiny
      if (this.pageAnalyzer) {
        const groupAnalysis = await this.pageAnalyzer.analyzeFullPage({
          includeGroupAnalysis: true
        });

        if (groupAnalysis.group && !groupAnalysis.group.canPost) {
          return {
            valid: false,
            reason: 'Ve skupinƒõ nen√≠ mo≈æn√© postovat'
          };
        }

        if (groupAnalysis.group && !groupAnalysis.group.isMember) {
          return {
            valid: false,
            reason: 'Nejste ƒçlenem skupiny'
          };
        }
      }

      return {
        valid: true,
        reason: 'Skupina je validn√≠ pro postov√°n√≠',
        analysis: groupAnalysis // P≈ôed√°v√°me anal√Ωzu pro dal≈°√≠ pou≈æit√≠
      };

    } catch (err) {
      return {
        valid: false,
        reason: `Chyba p≈ôi ovƒõ≈ôov√°n√≠ skupiny: ${err.message}`
      };
    }
  }

  async _legacyAccountLockCheck() {
    try {
      const blockTexts = [
        "v√°≈° √∫ƒçet jsme uzamkli",
        "√öƒçet byl zablokov√°n", 
        "√öƒçet m√°te zablokovan√Ω",
        "Account restricted",
        "temporarily restricted"
      ];
      
      // Kontrola v≈°ech variant textu blokace
      for (const text of blockTexts) {
        const isBlocked = await this._checkTexts(text, "Account block detected");
        if (isBlocked) {
          // Zaloguj detekci do system logu
          await Log.warn('[FB]', `Detekov√°no hl√°≈°en√≠ o zablokov√°n√≠ √∫ƒçtu: "${text}"`);
          await this._logAccountBlockDetection(text);
          return 'account_locked';
        }
      }
      
      return false;
    } catch (err) {
      await Log.error('[FB]', `Legacy account lock check failed: ${err}`);
      return false;
    }
  }

  async _logAccountBlockDetection(detectedText) {
    try {
      // Import db zde pro zabr√°nƒõn√≠ circular import
      const { db } = await import('./iv_sql.js');
      const os = await import('os');
      
      const currentUrl = this.page ? this.page.url() : 'unknown';
      const pageTitle = this.page ? await this.page.title().catch(() => 'unknown') : 'unknown';
      
      // Zaloguj do system logu
      await db.systemLog(
        'Account Block Detected',
        `Detekov√°no hl√°≈°en√≠ o zablokov√°n√≠ √∫ƒçtu: "${detectedText}"`,
        {
          detected_text: detectedText,
          page_url: currentUrl,
          page_title: pageTitle,
          timestamp: new Date().toISOString(),
          hostname: os.hostname()
        }
      );
      
      Log.info('[FB]', `Hl√°≈°en√≠ o blokaci zalogov√°no do system logu: "${detectedText}"`);
      
    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi logov√°n√≠ detekce blokace: ${err.message}`);
    }
  }

  /**
   * Naviguje na URL a ovƒõ≈ô√≠ zdrav√≠ str√°nky pomoc√≠ anal√Ωzy
   * @param {string} url - c√≠lov√° URL
   * @param {object} options - Puppeteer goto options
   * @returns {Promise<boolean>} true pokud je str√°nka zdrav√° nebo byl probl√©m vy≈ôe≈°en
   */
  async navigateToPage(url, options = {}) {
    try {
      // a) Navigace na str√°nku
      await this.page.goto(url, options);
      
      // V UI re≈æimu neprov√°dƒõt ≈æ√°dnou anal√Ωzu
      if (this.disableAnalysis) {
        Log.success('[FB]', `Navigace na ${url} √∫spƒõ≈°n√° (UI re≈æim - bez anal√Ωzy)`);
        return true;
      }
      
      // Inicializace analyzeru pokud je≈°tƒõ nen√≠ (pouze pokud nen√≠ zak√°z√°na anal√Ωza)
      if (!this.pageAnalyzer && !this.disableAnalysis) {
        await this.initializeAnalyzer();
      }
      
      // b) Komplexn√≠ anal√Ωza str√°nky m√≠sto jednoduch√©ho poƒçtu element≈Ø
      const analysis = await this.pageAnalyzer.analyzeFullPage({
        includePostingCapability: false
      });
      
      if (analysis.complexity.isNormal && !analysis.complexity.suspiciouslySimple) {
        Log.success('[FB]', `Navigace na ${url} √∫spƒõ≈°n√° - str√°nka je v po≈ô√°dku`);
        return true;
      } else {
        Log.info('[FB]', `Str√°nka ${url} vypad√° podez≈ôele - prov√°d√≠m dal≈°√≠ anal√Ωzu`);
        return await this.handlePageIssues(analysis);
      }
      
    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi navigaci na ${url}: ${err.message}`);
      throw err;
    }
  }

  /**
   * ≈òe≈°√≠ probl√©my s naƒçtenou str√°nkou
   * @param {object} analysis - v√Ωsledek anal√Ωzy z _performComplexityAnalysis
   * @returns {Promise<boolean>} true pokud m√° str√°nka dostatek element≈Ø, false pokud ne
   */
  async handlePageIssues(analysis) {
    try {
      Log.info('[FB]', `Analyzing page issues based on complexity analysis`);
      
      // Detekce d≈Øvodu pomoc√≠ viditeln√Ωch element≈Ø
      const lockReasonResult = await this.detectErrorPatterns();
      let lockReason = lockReasonResult ? lockReasonResult.type : 'unknown_checkpoint';
      
      // Zajist√≠, ≈æe lock_reason nebude del≈°√≠ ne≈æ 255 znak≈Ø (DB limit)
      if (lockReason && lockReason.length > 255) {
        lockReason = lockReason.substring(0, 252) + '...';
      }
      
      if (lockReasonResult && lockReasonResult.detected) {
        Log.info('[FB]', `Lock reason: ${lockReason} (${lockReasonResult.reason}) - nalezen text: "${lockReasonResult.foundText}"`);
      } else {
        Log.info('[FB]', `Lock reason: ${lockReason} - ≈æ√°dn√Ω specifick√Ω d≈Øvod nenalezen`);
      }
      
      const complexityInfo = analysis?.complexity ? 
        `Normal: ${analysis.complexity.isNormal}, Suspicious: ${analysis.complexity.suspiciouslySimple}` : 
        'No complexity data';
      
      await Log.systemLog('PAGE_ISSUE', `URL: ${this.page.url()}, Complexity: ${complexityInfo}, Reason: ${lockReason}`);
      
      return false;
      
    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi ≈ôe≈°en√≠ probl√©m≈Ø: ${err.message}`);
      return false;
    }
  }

  async openFB(user) {
    try {
      await this.bringToFront();
      
      await this.navigateToPage('https://www.facebook.com/', { waitUntil: 'domcontentloaded' });
      await Wait.toSeconds(3);
      return true;
    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi otev√≠r√°n√≠ str√°nky Facebooku: ${err.message}`);
      return false;
    }
  }

  // Pomocn√° metoda pro kontrolu dostupnosti analyz√©ru
  isAnalyzerAvailable() {
    return !this.disableAnalysis && this.pageAnalyzer;
  }

  // Zajist√≠ inicializaci analyz√©ru pokud je pot≈ôeba a povolena
  async ensureAnalyzer() {
    if (this.disableAnalysis) {
      throw new Error('Anal√Ωza je zak√°z√°na v UI re≈æimu');
    }
    if (!this.pageAnalyzer) {
      await this.initializeAnalyzer();
    }
  }

  async isProfileLoaded(user) {
    if (!this.isAnalyzerAvailable()) {
      Log.debug('[FB]', 'Anal√Ωza zak√°z√°na - p≈ôedpokl√°d√°m, ≈æe profil je naƒçten');
      return true; // V UI re≈æimu p≈ôedpokl√°d√°me, ≈æe je v≈°e OK
    }
    // Pou≈æij sjednocen√© metody z analyz√©ru
    return await this.pageAnalyzer.isProfileLoaded(user);
  }

  async login(user) {
    try {
      await this.acceptCookies();

      await this.page.waitForSelector('#email', { timeout: 5000 });
      await this.page.type('#email', user.fb_login, { delay: 30 + Math.random() * 30 });

      await this.page.waitForSelector('#pass', { timeout: 5000 });
      await this.page.type('#pass', user.fb_pass, { delay: 30 + Math.random() * 30 });

      const config = await getAllConfig();
      const loginText = config.cfg_login_text || 'P≈ôihl√°sit se';
      await this._clickByText(loginText);
      await Wait.toSeconds(15, 'Po p≈ôihl√°≈°en√≠');

      if (await this.isProfileLoaded(user)) {
        Log.success(`[FB] U≈æivatel ${user.id} ${user.name} ${user.surname} je nyn√≠ p≈ôihl√°≈°en.`);
        
        // Posun ƒçasu aktivity o +3 minuty pro rotaci √∫ƒçt≈Ø bƒõhem testov√°n√≠
        try {
          await db.updateUserWorktime(user.id, 3);
          Log.info(`[FB] ƒåas aktivity u≈æivatele ${user.id} posunut o +${Log.formatTime(3, 'm')} pro rotaci √∫ƒçt≈Ø`);
        } catch (err) {
          await Log.warn(`[FB] Nepoda≈ôilo se aktualizovat ƒças aktivity: ${err.message}`);
        }
        
        return 'now_loged';
      } else {
        await Log.warnInteractive(`[FB]`, `U≈æivatel nen√≠ p≈ôihl√°≈°en na FB.`);
        return false;
      }
    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi loginu: ${err}`);
      return false;
    }
  }

  async acceptCookies() {
    try {
      // Zkus√≠me naj√≠t tlaƒç√≠tko pro cookies z konfigurace (ALLOW = odm√≠t√°me voliteln√©!)
      const config = await getAllConfig();
      const acceptText = config.cfg_cookies_allow || 'Odm√≠tnout voliteln√© soubory cookie';
      Log.info(`[FB] Hled√°m tlaƒç√≠tko pro cookies: "${acceptText}"`);
      
      if (!this.pageAnalyzer) {
        throw new Error('PageAnalyzer nen√≠ inicializov√°n');
      }

      const success = await this.pageAnalyzer.clickElementWithText(acceptText, {
        matchType: 'contains',
        timeout: 5000,
        waitAfterClick: true,
        naturalDelay: true
      });

      if (success) {
        Log.info(`[FB] Cookie banner p≈ôijat pomoc√≠ PageAnalyzer: "${acceptText}".`);
        return true;
      } else {
        await Log.warn(`[FB] Cookie tlaƒç√≠tko "${acceptText}" nenalezeno.`);
        return false;
      }

    } catch (err) {
      await Log.error(`[FB] Cookie banner error: ${err.message}`);
      return false;
    }
  }

  /**
   * ≈òe≈°√≠ v√≠cestr√°nkov√Ω proces souhlasu se zpracov√°n√≠m dat pro reklamy.
   * @returns {Promise<boolean>} True pokud byl proces √∫spƒõ≈°nƒõ dokonƒçen.
   */
  async resolveAdConsentFlow() {
    Log.info('[FB]', 'Kontroluji obrazovku souhlasu s reklamami...');
    let inConsentFlow = true;
    let attempts = 0;
    const MAX_ATTEMPTS = 5; // Pojistka proti nekoneƒçn√© smyƒçce

    while (inConsentFlow && attempts < MAX_ATTEMPTS) {
      attempts++;
      try {
        // Hled√°me kl√≠ƒçov√Ω text, abychom vƒõdƒõli, ≈æe jsme st√°le v procesu
        const config = await getAllConfig();
        const adSettingsText = config.cfg_ad_settings || 'Zkontrolujte nastaven√≠ reklam';
        const consentElement = await this.page.waitForSelector(`xpath///span[contains(., '${adSettingsText}') or contains(., 'Review how we use data for ads') or contains(., 'Zkontrolujte, jestli m≈Ø≈æeme')]`, { timeout: 5000 });
        if (!consentElement) {
          inConsentFlow = false;
          continue;
        }

        Log.info(`[FB][AdConsent] Pokus ${attempts}/${MAX_ATTEMPTS}: Nalezena obrazovka souhlasu.`);

        // Hled√°me jak√©koliv akƒçn√≠ tlaƒç√≠tko s konfigurovateln√Ωmi texty
        const nextText = config.cfg_next_text || 'Dal≈°√≠';
        const acceptText = config.cfg_accept_text || 'P≈ôijmout';
        const allowAllText = config.cfg_allow_all_text || 'Povolit v≈°e';
        const saveText = config.cfg_save_text || 'Ulo≈æit';
        const confirmText = config.cfg_confirm_text || 'Potvrdit';
        const actionButton = await Promise.race([
          this.page.waitForSelector(`xpath///div[@role='button'][.//span[contains(., '${nextText}') or contains(., 'Next')]]`),
          this.page.waitForSelector(`xpath///div[@role='button'][.//span[contains(., '${acceptText}') or contains(., 'Accept')]]`),
          this.page.waitForSelector(`xpath///div[@role='button'][.//span[contains(., '${allowAllText}') or contains(., 'Allow all')]]`),
          this.page.waitForSelector(`xpath///div[@role='button'][.//span[contains(., '${saveText}') or contains(., 'Save')]]`),
          this.page.waitForSelector(`xpath///div[@role='button'][.//span[contains(., '${confirmText}') or contains(., 'Confirm')]]`)
        ]);

        if (actionButton) {
          const buttonText = await this.page.evaluate(el => el.textContent, actionButton);
          Log.info(`[FB][AdConsent] Klik√°m na tlaƒç√≠tko: "${buttonText}"`);
          await actionButton.click();
          await this.page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 10000 }).catch(() => {});
          await Wait.toSeconds(3, 'Poƒçkat na stabilizaci str√°nky');
        } else {
          await Log.warn('[FB][AdConsent] Nenalezeno ≈æ√°dn√© pokraƒçovac√≠ tlaƒç√≠tko, proces konƒç√≠.');
          inConsentFlow = false;
        }
      } catch (error) {
        // Pokud nenajdeme ≈æ√°dn√Ω prvek, p≈ôedpokl√°d√°me, ≈æe proces skonƒçil
        Log.info('[FB][AdConsent] Proces souhlasu s reklamami pravdƒõpodobnƒõ dokonƒçen.');
        inConsentFlow = false;
      }
    }
    return true;
  }

  /**
   * Roz≈°√≠≈ôen√° detekce zablokovan√Ωch √∫ƒçt≈Ø - kompatibiln√≠ se st√°vaj√≠c√≠m k√≥dem
   * @returns {Object|string} Objekt s v√Ωsledkem detekce nebo string pro zpƒõtnou kompatibilitu
   */
  async isAccountLocked() {
    try {
      // Pokud nem√°me analyzer, pou≈æij fallback
      if (!this.pageAnalyzer) {
        const quitRequested = await Log.warnInteractive('[FB]', 'PageAnalyzer nen√≠ k dispozici, pou≈æ√≠v√°m fallback detekci');
        if (quitRequested === 'quit') return { locked: false, quit: true }; // Propagate quit request
        return await this._legacyAccountLockCheck();
      }

      // Rychl√° kontrola pomoc√≠ nov√©ho analyzeru
      const quickCheck = await this.pageAnalyzer.quickStatusCheck();

      if (quickCheck.hasErrors) {
        // Detailn√≠ anal√Ωza p≈ôi probl√©mech
        const fullAnalysis = await this.pageAnalyzer.analyzeFullPage({
          includePostingCapability: false
        });

        if (fullAnalysis.errors.hasErrors) {
          await Log.warn('[FB]', `Detekov√°n probl√©m s √∫ƒçtem: ${fullAnalysis.errors.patterns.reason || 'Nezn√°m√Ω probl√©m'}`);

          // Zpƒõtn√° kompatibilita - vra≈• string pro kritick√© chyby
          if (fullAnalysis.errors.severity === 'critical') {
            return 'account_locked';
          }

          // Vra≈• objekt s detaily
          return {
            locked: true,
            reason: fullAnalysis.errors.patterns.reason || 'Detekov√°n probl√©m s √∫ƒçtem', type: fullAnalysis.errors.patterns.type || 'UNKNOWN',
            severity: fullAnalysis.errors.severity
          };
        }
      }

      return false; // ≈Ω√°dn√Ω probl√©m

    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi detekci zablokovan√©ho √∫ƒçtu: ${err.message}`);
      // Fallback p≈ôi chybƒõ
      return await this._legacyAccountLockCheck();
    }
  }

  async verifyPostingReadiness(targetGroup = null) {
    try {
      if (!this.pageAnalyzer) {
        await Log.warn('[FB]', 'PageAnalyzer nen√≠ k dispozici pro ovƒõ≈ôen√≠ postov√°n√≠');
        return {
          ready: false,
          reason: 'Analyzer nen√≠ dostupn√Ω'
        };
      }

      Log.info('[FB]', 'Ovƒõ≈ôuji p≈ôipravenost pro postov√°n√≠...');

      // Z√°kladn√≠ kontrola stavu str√°nky
      const quickCheck = await this.pageAnalyzer.quickStatusCheck();

      if (!quickCheck.isReady) {
        return {
          ready: false,
          reason: `Str√°nka nen√≠ p≈ôipravena: p≈ôihl√°≈°en=${quickCheck.isLoggedIn}, chyby=${quickCheck.hasErrors}, responsive=${quickCheck.isResponsive}`,
          details: quickCheck
        };
      }

      // Kontrola schopnosti postov√°n√≠
      const postingCheck = await this.pageAnalyzer.verifyPostingCapability();

      if (!postingCheck.canPost) {
        return {
          ready: false,
          reason: postingCheck.reason,
          pageType: postingCheck.pageType,
          details: postingCheck
        };
      }

      // Pokud je specifikov√°na c√≠lov√° skupina, ovƒõ≈ô ji
      let groupAnalysis = null;
      if (targetGroup) {
        const groupVerification = await this._verifyTargetGroup(targetGroup);
        if (!groupVerification.valid) {
          return {
            ready: false,
            reason: groupVerification.reason,
            details: groupVerification
          };
        }
        groupAnalysis = groupVerification.analysis; // Zachov√°me anal√Ωzu pro p≈ôed√°n√≠
      }

      Log.success('[FB]', 'Str√°nka je p≈ôipravena pro postov√°n√≠');
      return {
        ready: true,
        reason: 'V≈°echny kontroly pro≈°ly √∫spƒõ≈°nƒõ',
        pageType: postingCheck.pageType,
        analysis: groupAnalysis, // P≈ôed√°v√°me anal√Ωzu pro dal≈°√≠ pou≈æit√≠
        details: {
          quickCheck: quickCheck,
          postingCheck: postingCheck
        }
      };

    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi ovƒõ≈ôov√°n√≠ p≈ôipravenosti: ${err.message}`);
      return {
        ready: false,
        reason: `Chyba p≈ôi ovƒõ≈ôov√°n√≠: ${err.message}`
      };
    }
  }

  /**
   * Analyzuje komplexnost str√°nky pro detekci chybov√Ωch stav≈Ø
   * @returns {Object} Informace o komplexnosti str√°nky
   */
  async analyzePageComplexity() {
    // Backwards compatibility - pokud nƒõkdo vol√° p≈ô√≠mo tuto metodu
    if (this.pageAnalyzer) {
      const analysis = await this.pageAnalyzer.analyzeFullPage({
        includePostingCapability: false
      });
      return analysis.complexity;
    }

    // Fallback - bez PageAnalyzer nelze prov√©st anal√Ωzu
    await Log.error('[FB]', 'PageAnalyzer nen√≠ dostupn√Ω - nelze prov√©st anal√Ωzu komplexnosti str√°nky');
    return { isNormal: false, metrics: null, suspiciouslySimple: true };
  }

  /**
   * Detekuje specifick√© chybov√© patterny na str√°nce - BEZPEƒåN√Å verze
   * @returns {Object} V√Ωsledek detekce s d≈Øvodem
   */
  async detectErrorPatterns() {
    const patterns = [
      // Videoselfie po≈æadavky
      {
        texts: ['videoselfie', 'video selfie', 'Please take a video selfie'],
        reason: 'Po≈æadavek na videoselfie', type: 'VIDEOSELFIE'
      },

      // Klasick√© zablokov√°n√≠
      {
        texts: ['v√°≈° √∫ƒçet jsme uzamkli', 'Account restricted', 'temporarily restricted'],
        reason: '√öƒçet je zablokov√°n', type: 'ACCOUNT_LOCKED'
      },

      // Ovƒõ≈ôen√≠ identity
      {
        texts: ['Verify your identity', 'ovƒõ≈ôen√≠ identity', 'identity verification'],
        reason: 'Po≈æadavek na ovƒõ≈ôen√≠ identity', type: 'IDENTITY_VERIFICATION'
      },

      // Podez≈ôel√° aktivita
      {
        texts: ['suspicious activity', 'podez≈ôel√° aktivita', 'unusual activity'],
        reason: 'Detekov√°na podez≈ôel√° aktivita', type: 'SUSPICIOUS_ACTIVITY'
      },

      // Ovƒõ≈ôen√≠ telefonu
      {
        texts: ['Please confirm your phone', 'potvrƒète telefon', 'phone verification'],
        reason: 'Po≈æadavek na ovƒõ≈ôen√≠ telefonu', type: 'PHONE_VERIFICATION'
      },

      // Checkpoint obecnƒõ
      {
        texts: ['Security check', 'bezpeƒçnostn√≠ kontrola', 'checkpoint'],
        reason: 'Bezpeƒçnostn√≠ checkpoint', type: 'SECURITY_CHECKPOINT'
      },

      // Chyby p≈ôihl√°≈°en√≠
      {
        texts: ['Nepamatujete si sv≈Øj √∫ƒçet?', 'Forgot Account?'],
        reason: 'Ne√∫spƒõ≈°n√© p≈ôihl√°≈°en√≠', type: 'LOGIN_FAILED'
      }
    ];

    for (const pattern of patterns) {
      for (const text of pattern.texts) {
        try {
          // Bezpeƒçn√° verze _findByText s timeout a error handling
          const found = await this.safelyFindByText(text);
          if (found && found.length > 0) {
            return {
              detected: true,
              reason: pattern.reason, type: pattern.type,
              foundText: text
            };
          }
        } catch (err) {
          // Pokraƒçuj na dal≈°√≠ text p≈ôi chybƒõ
          await Log.warn(`[FB] Chyba p≈ôi hled√°n√≠ textu "${text}": ${err}`);
          continue;
        }
      }
    }

    return { detected: false, reason: null, type: null };
  }

  /**
   * Bezpeƒçn√° verze _findByText s lep≈°√≠m error handlingem
   * @param {string} text - Text k vyhled√°n√≠
   * @returns {Array} Pole nalezen√Ωch element≈Ø
   */
  async safelyFindByText(text) {
    try {
      if (!this.page || typeof this.page.evaluate !== 'function') {
        await Log.warn(`[FB] Page objektu nen√≠ k dispozici pro hled√°n√≠ textu`);
        return [];
      }

      // Pou≈æij page.evaluate m√≠sto $x pro lep≈°√≠ kompatibilitu
      const found = await this.page.evaluate((searchText) => {
        const xpath = `//span[contains(normalize-space(text()), "${searchText}")]`;
        const result = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
        return result.snapshotLength > 0 ? [true] : []; // Vra≈• jednoduch√Ω indik√°tor
      }, text);

      return found;

    } catch (err) {
      await Log.warn(`[FB] safelyFindByText selhalo pro "${text}": ${err}`);
      return [];
    }
  }

  /**
   * Kontroluje p≈ô√≠tomnost standardn√≠ FB navigace
   * @returns {Boolean} True pokud m√° str√°nka FB navigaci
   */
  async hasStandardNavigation() {
    try {
      if (!this.page || typeof this.page.$ !== 'function') {
        return false;
      }

      const navigationSelectors = [
        '[aria-label="V√°≈° profil"]',
        '[aria-label="FB"]',
        '[data-pagelet="LeftRail"]',
        '[role="banner"]',
        'nav[aria-label]'
      ];

      for (const selector of navigationSelectors) {
        try {
          const element = await this.page.$(selector);
          if (element) {
            return true;
          }
        } catch (err) {
          // Pokraƒçuj na dal≈°√≠ selektor
          continue;
        }
      }

      return false;

    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi kontrole navigace: ${err}`);
      return false;
    }
  }

  /**
   * Pokroƒçil√° detekce videoselfie po≈æadavku
   * @returns {Boolean} True pokud je detekov√°n videoselfie po≈æadavek
   */
  async detectVideoselfieRequest() {
    const videoselfieIndicators = [
      'videoselfie',
      'video selfie',
      'take a video',
      'record yourself',
      'nahr√°t video',
      'video sebe sama'
    ];

    for (const indicator of videoselfieIndicators) {
      const found = await fbSupport.findByText(this.page, indicator, { timeout: 1500 });
      if (found.length > 0) {
        await Log.warn(`[FB] Detekov√°n videoselfie po≈æadavek: "${indicator}"`);
        return true;
      }
    }

    // Kontrola na p≈ô√≠tomnost video element≈Ø nebo camera ikon≈Ø
    try {
      const hasVideoElements = await this.page.evaluate(() => {
        const videos = document.querySelectorAll('video').length;
        const cameraIcons = document.querySelectorAll('[aria-label*="camera"], [aria-label*="video"]').length;
        return videos > 0 || cameraIcons > 0;
      });

      if (hasVideoElements) {
        await Log.warn(`[FB] Detekov√°na video/camera rozhran√≠ - mo≈æn√Ω videoselfie`);
        return true;
      }
    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi detekci video element≈Ø: ${err}`);
    }

    return false;
  }

  async newThing() {
    try {
      if (!this.pageAnalyzer) {
        throw new Error('PageAnalyzer nen√≠ inicializov√°n');
      }

      const currentUrl = this.page.url();
      
      // Na homepage hled√°me "Co se v√°m hon√≠ hlavou", jinde "Napi≈°te nƒõco"
      const isHomepage = currentUrl === 'https://www.facebook.com/' || 
                        currentUrl === 'https://www.facebook.com' ||
                        currentUrl.startsWith('https://www.facebook.com/?');
      
      const searchText = isHomepage ? "Co se v√°m hon√≠ hlavou" : "Napi≈°te nƒõco";
      Log.info('[FB]', `Hled√°m element "${searchText}" (${isHomepage ? 'homepage' : 'skupina'})`);
      
      // Pou≈æij PageAnalyzer m√≠sto fbSupport.findByText
      const elementExists = await this.pageAnalyzer.elementExists(searchText, {
        matchType: 'startsWith',
        refreshCache: true
      });

      if (elementExists) {
        // Ulo≈æ√≠me si informaci, ≈æe element existuje - clickNewThing() pou≈æije PageAnalyzer
        this.newThingText = searchText;
        this.newThingElement = true; // Kompatibilita s p≈Øvodn√≠m k√≥dem
        Log.success('[FB]', `Element "${searchText}" nalezen v PageAnalyzer cache`);
        return true;
      }

      throw new Error(`Element "${searchText}" nebyl nalezen`);
    } catch (err) {
      await Log.error('[FB] newThing()', err);
      return false;
    }
  }

  async findDiscussionElement() {
    try {
      if (!this.pageAnalyzer) {
        throw new Error('PageAnalyzer nen√≠ inicializov√°n');
      }

      const config = await getAllConfig();
      const discussionTexts = [
        config.cfg_discussion_text || 'Diskuze',
        config.cfg_discussion_en || 'Discussion', 
        config.cfg_main_tab_text || 'Hlavn√≠',
        config.cfg_main_tab_en || 'Featured'
      ];
      
      Log.info('[FB]', `Hled√°m element pro diskuzi. Varianty: ${discussionTexts.join(', ')}`);

      for (const text of discussionTexts) {
        try {
          // Pou≈æij PageAnalyzer m√≠sto fbSupport.findByText
          const elementExists = await this.pageAnalyzer.elementExists(text, {
            matchType: 'exact',
            refreshCache: false
          });

          if (elementExists) {
            this.discussionText = text;
            this.discussionElement = true; // Kompatibilita s p≈Øvodn√≠m k√≥dem
            Log.success('[FB]', `Element pro diskuzi "${text}" nalezen v PageAnalyzer cache`);
            return true;
          }
        } catch (e) {
          // Pokraƒçovat s dal≈°√≠ variantou
        }
      }
      
      Log.info('[FB]', 'Element pro diskuzi nebyl nalezen');
      return false;
    } catch (err) {
      await Log.error('[FB] findDiscussionElement()', err);
      return false;
    }
  }

  async findJoinGroupElement() {
    try {
      if (!this.pageAnalyzer) {
        throw new Error('PageAnalyzer nen√≠ inicializov√°n');
      }

      const config = await getAllConfig();
      const joinText = config.cfg_group_join_text || 'P≈ôidat se ke skupinƒõ';
      
      Log.info('[FB]', `Hled√°m element pro p≈ôid√°n√≠ do skupiny: "${joinText}"`);

      const elementExists = await this.pageAnalyzer.elementExists(joinText, {
        matchType: 'exact',
        refreshCache: true
      });

      if (elementExists) {
        this.joinGroupText = joinText;
        this.joinGroupElement = true; // Kompatibilita s p≈Øvodn√≠m k√≥dem
        Log.success('[FB]', `Element pro p≈ôid√°n√≠ do skupiny "${joinText}" nalezen v PageAnalyzer cache`);
        return true;
      }

      Log.info('[FB]', 'Element pro p≈ôid√°n√≠ do skupiny nebyl nalezen');
      return false;
    } catch (err) {
      await Log.error('[FB] findJoinGroupElement()', err);
      return false;
    }
  }

  async findPostElementWithStrategy(strategy, newPostTexts) {
    try {
      Log.debug('[FB]', `Spou≈°t√≠m strategii: ${strategy} pro texty: ${newPostTexts.join(', ')}`);
      
      // JavaScript implementace m√≠sto XPath
      for (const text of newPostTexts) {
        const matchType = strategy === 'starts-with' ? 'startsWith' : 'contains';
        
        // Pou≈æij fbSupport.findByText s nov√Ωmi JavaScript metodami
        const elements = await fbSupport.findByText(this.page, text, { 
          match: matchType, 
          timeout: 3000 
        });
        
        if (elements && elements.length > 0) {
          Log.debug('[FB]', `‚úì Nalezen element pro text: "${text}" (${strategy})`);
          return { handle: elements[0], text };
        } else {
          Log.debug('[FB]', `‚úó Element nenalezen pro text: "${text}" (${strategy})`);
        }
      }
      
      Log.debug('[FB]', `Strategie ${strategy}: ≈æ√°dn√© elementy nenalezeny`);
      return null;
    } catch (err) {
      Log.debug('[FB]', `Strategie ${strategy} selhala: ${err.message}`);
      return null;
    }
  }


  async clickNewThing() {
    try {
      if (!this.newThingElement || !this.newThingText) {
        await Log.error('[FB]', 'newThingElement nen√≠ definov√°n. Mo≈æn√° selhal newThing()');
        return false;
      }
      
      if (!this.pageAnalyzer) {
        throw new Error('PageAnalyzer nen√≠ inicializov√°n');
      }
      
      Log.info('[FB]', 'Klik√°m na element pro psan√≠ p≈ô√≠spƒõvku...');
      await this.bringToFront();
      
      // Pou≈æij PageAnalyzer pro kliknut√≠
      const clickResult = await this.pageAnalyzer.clickElementWithText(this.newThingText, {
        matchType: 'startsWith',
        naturalDelay: true,
        waitAfterClick: true
      });
      
      if (clickResult) {
        Log.success('[FB]', 'Kliknuto na pole pro psan√≠ p≈ô√≠spƒõvku pomoc√≠ PageAnalyzer.');
        return true;
      } else {
        throw new Error('PageAnalyzer kliknut√≠ selhalo');
      }
    } catch (err) {
      await Log.error('[FB]', `Klik na newThingElement selhal: ${err}`);
      return false;
    }
  }

  async pasteStatement(text, useClipboard = false) {
    try {
      if (!text) {
        await Log.error('[FB]', 'Pr√°zdn√Ω text pro p≈ô√≠spƒõvek - nelze pokraƒçovat');
        return false;
      }

      Log.info('[FB]', `Vkl√°d√°m text p≈ô√≠spƒõvku (${text.length} znak≈Ø). Metoda: ${useClipboard ? 'schr√°nka' : 'psan√≠ po p√≠smenech'}`);
      
      // Ujisti se, ≈æe m√° FB str√°nka focus p≈ôed vkl√°d√°n√≠m
      await this.bringToFront();
      
      await Wait.toSeconds(5, 'P≈ôed vlo≈æen√≠m textu');
      
      if (useClipboard) {
        // Pou≈æij vkl√°d√°n√≠ p≈ôes schr√°nku (rychlej≈°√≠ pro UTIO a RSS)
        Log.info('[FB]', 'Pokus o vlo≈æen√≠ p≈ôes schr√°nku...');
        const success = await this.pasteTextViaClipboard(text);
        if (!success) {
          await Log.warn('[FB]', 'Vkl√°d√°n√≠ p≈ôes schr√°nku selhalo, p≈ôep√≠n√°m na psan√≠ po p√≠smenech');
          await this._typeLikeHuman(text);
        } else {
          Log.success('[FB]', 'Text √∫spƒõ≈°nƒõ vlo≈æen p≈ôes schr√°nku');
        }
      } else {
        // Pou≈æij psan√≠ po p√≠smenech (pro cit√°ty a jin√© akce)
        Log.info('[FB]', 'Spou≈°t√≠m psan√≠ po p√≠smenech...');
        await this._typeLikeHuman(text);
        Log.success('[FB]', 'Text √∫spƒõ≈°nƒõ naps√°n po p√≠smenech');
      }
      
      Log.success('[FB]', `Text vlo≈æen: "${text.substring(0, 100)}${text.length > 100 ? '...' : ''}"`);
      return true;

    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi psan√≠ p≈ô√≠spƒõvku: ${err}`);
      return false;
    }
  }

  async pasteFromClipboard() {
    try {
      if (!this.page || this.page.isClosed()) {
        await Log.error('[FB] Str√°nka nen√≠ dostupn√° pro vlo≈æen√≠ ze schr√°nky.');
        return false;
      }

      await this.bringToFront();

      // Pou≈æijeme Ctrl+V pro vlo≈æen√≠ ze schr√°nky
      await this.page.keyboard.down('Control');
      await this.page.keyboard.press('KeyV');
      await this.page.keyboard.up('Control');

      await Wait.toSeconds(2, 'Poƒçk√°me na vlo≈æen√≠');

      Log.info('[FB] Text vlo≈æen ze schr√°nky pomoc√≠ Ctrl+V');
      return true;

    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi vkl√°d√°n√≠ ze schr√°nky: ${err}`);
      return false;
    }
  }

  async pasteTextViaClipboard(text) {
    try {
      if (!text) throw `Pr√°zdn√Ω text pro vlo≈æen√≠.`;

      // Ujisti se, ≈æe m√° str√°nka focus pro p≈ô√≠stup ke schr√°nce
      await this.bringToFront();
      await Wait.toSeconds(0.5);

      // Zkop√≠ruj text do schr√°nky
      await this.page.evaluate((textToCopy) => {
        return navigator.clipboard.writeText(textToCopy);
      }, text);

      await Wait.toSeconds(1);

      // Vlo≈æ√≠ text pomoc√≠ Ctrl+V
      const success = await this.pasteFromClipboard();
      
      if (success) {
        Log.info(`[FB] Text vlo≈æen pomoc√≠ schr√°nky: ${text.substring(0, 100)}${text.length > 100 ? '...' : ''}`);
      }
      
      return success;

    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi vkl√°d√°n√≠ textu pomoc√≠ schr√°nky: ${err}`);
      return false;
    }
  }

  async writeMessage(text, useClipboard = false) {
    try {
      Log.info('[FB]', `Zaƒç√≠n√°m psan√≠ zpr√°vy (${text.length} znak≈Ø)...`);
      
      // 1. Najdi pole pro psan√≠ p≈ô√≠spƒõvku
      if (!await this.newThing()) {
        await Log.error('[FB]', 'Nepoda≈ôilo se naj√≠t pole pro psan√≠ p≈ô√≠spƒõvku');
        return false;
      }
      
      // 2. Klikni na pole pro psan√≠ p≈ô√≠spƒõvku
      if (!await this.clickNewThing()) {
        await Log.error('[FB]', 'Nepoda≈ôilo se kliknout na pole pro psan√≠ p≈ô√≠spƒõvku');
        return false;
      }
      
      // 3. Vlo≈æi text p≈ô√≠spƒõvku
      if (!await this.pasteStatement(text, useClipboard)) {
        await Log.error('[FB]', 'Nepoda≈ôilo se vlo≈æit text p≈ô√≠spƒõvku');
        return false;
      }
      
      // 4. Ode≈°li p≈ô√≠spƒõvek
      if (!await this.clickSendButton()) {
        await Log.error('[FB]', 'Nepoda≈ôilo se odeslat p≈ô√≠spƒõvek');
        return false;
      }
      
      Log.success('[FB]', 'Zpr√°va √∫spƒõ≈°nƒõ naps√°na a odesl√°na!');
      return true;
      
    } catch (err) {
      await Log.error('[FB] writeMessage', err);
      return false;
    }
  }

  async clickSendButton() {
    try {
      if (!this.page || this.page.isClosed()) {
        await Log.error('[FB] Str√°nka nen√≠ dostupn√°.');
        return false;
      }

      if (!this.pageAnalyzer) {
        throw new Error('PageAnalyzer nen√≠ inicializov√°n');
      }

      await this.bringToFront();

      Log.info('[FB] Kontrolujem napsan√Ω text...');
      await Wait.toSeconds(2, 'ƒåek√°n√≠ na aktivaci tlaƒç√≠tka/reakci');

      Log.info('[FB] ƒåek√°m ne≈æ se tlaƒç√≠tko aktivuje...');
      await Wait.toSeconds(5, 'N√°hodn√° pauza 2-5s');

      Log.info('[FB] Klik√°m na tlaƒç√≠tko "Zve≈ôejnit"');

      const config = await getAllConfig();
      const submitTexts = config.cfg_submit_texts || ["Zve≈ôejnit", "P≈ôidat"];

      // Zkus jednotliv√© texty p≈ôes PageAnalyzer
      for (const submitText of submitTexts) {
        const success = await this.pageAnalyzer.clickElementWithText(submitText, {
          matchType: 'exact',
          timeout: 3000,
          waitAfterClick: true,
          naturalDelay: true
        });

        if (success) {
          Log.success(`[FB] P≈ô√≠spƒõvek odesl√°n pomoc√≠ PageAnalyzer: "${submitText}"`);
          return true;
        }
      }

      await Log.warn('[FB] ≈Ω√°dn√© odeslac√≠ tlaƒç√≠tko nenalezeno');
      return false;

    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi odes√≠l√°n√≠:`, err);
      return false;
    }
  }

  // fallbackClick() odstranƒõna - pou≈æ√≠v√°me pouze PageAnalyzer

  async findActiveSendButtons() {
    const candidates = [];
    const config = await getAllConfig();
    const submitTexts = config.cfg_submit_texts || ["P≈ôidat", "Zve≈ôejnit"];

    try {
      Log.info('[FB] Hled√°m tlaƒç√≠tka pomoc√≠ standardn√≠ch selektor≈Ø...');

      // Strategie 1: Hled√°n√≠ v≈°ech span element≈Ø pomoc√≠ JavaScript evaluation
      const allSpans = await this.page.evaluate(() => {
        return Array.from(document.querySelectorAll('span')).map((span, index) => ({
          index,
          text: span.textContent?.trim() || '',
          isVisible: span.offsetParent !== null
        }));
      });
      Log.info(`[FB] Nalezeno ${allSpans.length} span element≈Ø.`);

      for (const spanInfo of allSpans) {
        try {
          if (!spanInfo.isVisible) continue;

          const context = await this.page.evaluate((spanIndex) => {
            const allSpans = document.querySelectorAll('span');
            const el = allSpans[spanIndex];
            if (!el) return null;

            const text = el.textContent.trim();
            const rect = el.getBoundingClientRect();
            const style = window.getComputedStyle(el);
            const button = el.closest('button, div[role="button"], [onclick], [tabindex]');

            return {
              text: text,
              visible: rect.width > 0 && rect.height > 0,
              enabled: !el.hasAttribute('disabled') &&
                !el.hasAttribute('aria-disabled') &&
                style.pointerEvents !== 'none',
              hasButton: !!button,
              buttonDisabled: button ? (
                button.hasAttribute('disabled') ||
                button.hasAttribute('aria-disabled') ||
                button.getAttribute('aria-disabled') === 'true' ||
                window.getComputedStyle(button).pointerEvents === 'none'
              ) : false,
              hasActionText: text.includes('k p≈ô√≠spƒõvku') || text.includes('p≈ô√≠spƒõvku'),
              opacity: parseFloat(style.opacity || 1),
              display: style.display,
              visibility: style.visibility,
              buttonAriaLabel: button ? button.getAttribute('aria-label') : null,
              spanIndex: spanIndex
            };
          }, spanInfo.index);

          if (context && this.isTargetText(context.text, submitTexts) && this.isValidCandidate(context)) {
            candidates.push({ element: null, context, text: context.text, spanIndex: spanInfo.index });
            Log.info(`[FB] Nalezen kandid√°t: "${context.text}" (enabled: ${context.enabled}, buttonDisabled: ${context.buttonDisabled})`);
          }
        } catch (evalErr) {
          // Tich√° chyba - element u≈æ neexistuje
        }
      }

      // Strategie 2: Hled√°n√≠ button≈Ø pomoc√≠ JavaScript evaluation
      const buttons = await this.page.evaluate(() => {
        return Array.from(document.querySelectorAll('button, div[role="button"]')).map((button, index) => ({
          index,
          ariaLabel: button.getAttribute('aria-label') || '',
          text: button.textContent?.trim() || '',
          isVisible: button.offsetParent !== null
        }));
      });
      Log.info(`[FB] Nalezeno ${buttons.length} button element≈Ø.`);

      for (const buttonInfo of buttons) {
        try {
          if (!buttonInfo.isVisible) continue;

          const context = await this.page.evaluate((buttonIndex) => {
            const allButtons = document.querySelectorAll('button, div[role="button"]');
            const el = allButtons[buttonIndex];
            if (!el) return null;

            const ariaLabel = el.getAttribute('aria-label') || '';
            const text = el.textContent.trim();
            const rect = el.getBoundingClientRect();
            const style = window.getComputedStyle(el);

            return {
              text: ariaLabel || text,
              ariaLabel: ariaLabel,
              innerText: text,
              visible: rect.width > 0 && rect.height > 0,
              enabled: !el.hasAttribute('disabled') &&
                !el.hasAttribute('aria-disabled') &&
                el.getAttribute('aria-disabled') !== 'true' &&
                style.pointerEvents !== 'none',
              hasButton: true,
              buttonDisabled: el.hasAttribute('disabled') ||
                el.hasAttribute('aria-disabled') ||
                el.getAttribute('aria-disabled') === 'true',
              hasActionText: (ariaLabel + text).includes('k p≈ô√≠spƒõvku') || (ariaLabel + text).includes('p≈ô√≠spƒõvku'),
              opacity: parseFloat(style.opacity || 1),
              display: style.display,
              visibility: style.visibility,
              buttonIndex: buttonIndex
            };
          }, buttonInfo.index);

          if (context &&
            (this.isTargetText(context.ariaLabel, submitTexts) || this.isTargetText(context.innerText, submitTexts)) &&
            this.isValidCandidate(context)) {
            candidates.push({ element: null, context, text: context.ariaLabel || context.innerText, buttonIndex: buttonInfo.index });
            Log.info(`[FB] Nalezen button kandid√°t: "${context.text}" (aria: "${context.ariaLabel}")`);
          }
        } catch (evalErr) {
          // Tich√° chyba
        }
      }

      // Strategie 3: Pokroƒçil√© hled√°n√≠ v compose area
      const composeSelectors = [
        '[data-testid*="composer"] button',
        '[data-pagelet="composer"] button',
        '.composer button',
        '[role="dialog"] button',
        '[data-testid*="post"] button'
      ];

      for (const selector of composeSelectors) {
        try {
          const elements = await this.page.evaluate((sel) => {
            return Array.from(document.querySelectorAll(sel)).map((el, index) => ({
              index,
              text: el.textContent?.trim() || '',
              ariaLabel: el.getAttribute('aria-label') || '',
              isVisible: el.offsetParent !== null
            }));
          }, selector);
          for (const elementInfo of elements) {
            try {
              if (!elementInfo.isVisible) continue;

              const context = await this.page.evaluate((sel, elementIndex) => {
                const allElements = document.querySelectorAll(sel);
                const el = allElements[elementIndex];
                if (!el) return null;

                const text = el.textContent.trim();
                const ariaLabel = el.getAttribute('aria-label') || '';
                const rect = el.getBoundingClientRect();
                const style = window.getComputedStyle(el);

                return {
                  text: text || ariaLabel,
                  ariaLabel: ariaLabel,
                  visible: rect.width > 0 && rect.height > 0,
                  enabled: !el.hasAttribute('disabled') &&
                    !el.hasAttribute('aria-disabled') &&
                    style.pointerEvents !== 'none',
                  hasButton: true,
                  buttonDisabled: false,
                  hasActionText: false,
                  opacity: parseFloat(style.opacity || 1),
                  display: style.display,
                  visibility: style.visibility,
                  elementIndex: elementIndex
                };
              }, selector, elementInfo.index);

              if (context && this.isTargetText(context.text, submitTexts) && this.isValidCandidate(context)) {
                // Kontrola, zda u≈æ nen√≠ v candidates
                const exists = candidates.some(c => c.text === context.text);
                if (!exists) {
                  candidates.push({ element: null, context, text: context.text, elementIndex: elementInfo.index, selector });
                  Log.info(`[FB] Nalezen compose kandid√°t: "${context.text}"`);
                }
              }
            } catch (evalErr) {
              // Tich√° chyba
            }
          }
        } catch (selectorErr) {
          Log.debug(`[FB] Selector "${selector}" selhal: ${selectorErr.message}`);
        }
      }

      Log.info(`[FB] Celkem nalezeno ${candidates.length} kandid√°t≈Ø na tlaƒç√≠tka.`);
      return candidates;

    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi hled√°n√≠ tlaƒç√≠tek: ${err}`);
      return [];
    }
  }

  isTargetText(text, submitTexts) {
    if (!text) return false;
    const normalizedText = text.trim().toLowerCase();
    const targets = submitTexts.map(t => t.toLowerCase());
    return targets.includes(normalizedText);
  }

  isValidCandidate(context) {
    return (
      context.visible &&
      context.enabled &&
      !context.buttonDisabled &&
      context.hasButton &&
      !context.hasActionText &&
      context.opacity > 0.3 &&
      context.display !== 'none' &&
      context.visibility !== 'hidden'
    );
  }


  selectBestCandidate(candidates) {
    // Prioritizujeme kandid√°ty podle preferenc√≠
    const priorities = ['P≈ôidat', 'Zve≈ôejnit', 'Post', 'Publikovat', 'Hotovo'];

    for (const priority of priorities) {
      const matching = candidates.filter(c => c.text === priority);
      if (matching.length > 0) {
        // Vr√°t√≠me posledn√≠ matching element (ƒçasto je to ten spr√°vn√Ω)
        return matching[matching.length - 1];
      }
    }

    // Fallback - vr√°t√≠me posledn√≠ dostupn√Ω kandid√°t
    return candidates.length > 0 ? candidates[candidates.length - 1] : null;
  }

  async performClick(element) {
    try {
      // Dvojit√° kontrola p≈ôed kliknut√≠m
      const stillValid = await this.page.evaluate(el => {
        if (!el) return false;
        const rect = el.getBoundingClientRect();
        const style = window.getComputedStyle(el);
        const button = el.closest('button, div[role="button"], [onclick], [tabindex]');

        return rect.width > 0 &&
          rect.height > 0 &&
          style.pointerEvents !== 'none' &&
          (!button || !button.hasAttribute('disabled'));
      }, element);

      if (!stillValid) {
        await Log.warn('[FB] Element u≈æ nen√≠ platn√Ω pro kliknut√≠.');
        return false;
      }

      // Scroll element into view
      await this.page.evaluate(el => {
        el.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, element);

      await Wait.toSeconds(0.5);

      // Zkus√≠me nƒõkolik metod kliknut√≠
      const clickMethods = [
        // Metoda 1: Bƒõ≈æn√© kliknut√≠
        async () => {
          await element.click();
          Log.info('[FB] Pou≈æito bƒõ≈æn√© kliknut√≠.');
        },
        // Metoda 2: JavaScript kliknut√≠
        async () => {
          await this.page.evaluate(el => el.click(), element);
          Log.info('[FB] Pou≈æito JavaScript kliknut√≠.');
        },
        // Metoda 3: Kliknut√≠ na parent button
        async () => {
          await this.page.evaluate(el => {
            const button = el.closest('button, div[role="button"]');
            if (button) button.click();
          }, element);
          Log.info('[FB] Pou≈æito kliknut√≠ na parent button.');
        }
      ];

      for (const [index, clickMethod] of clickMethods.entries()) {
        try {
          await clickMethod();
          await Wait.toSeconds(2, 'ƒåek√°n√≠ na aktivaci tlaƒç√≠tka/reakci');

          // Kontrola √∫spƒõchu - hled√°me zda se objevilo nƒõjak√© potvrzen√≠ nebo zmizely elementy
          const success = await this.page.evaluate(() => {
            // Hled√°me indik√°tory √∫spƒõ≈°n√©ho odesl√°n√≠
            const indicators = [
              document.querySelector('[data-testid="toast"]'), // Toast notifikace
              document.querySelector('.feedback'), // Feedback message
              !document.querySelector('span:contains("P≈ôidat")'), // Tlaƒç√≠tko zmizelo
            ];
            return indicators.some(Boolean);
          });

          if (success) {
            Log.success(`[FB] Kliknut√≠ metodou ${index + 1} bylo √∫spƒõ≈°n√©.`);
            return true;
          }

        } catch (clickErr) {
          await Log.warn(`[FB] Metoda kliknut√≠ ${index + 1} selhala: ${clickErr.message}`);
        }
      }

      await Log.warn('[FB] V≈°echny metody kliknut√≠ selhaly.');
      return false;

    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi klik√°n√≠: ${err}`);
      return false;
    }
  }

  async defaultRange() {
    const config = await getAllConfig();
    const t1 = config.cfg_privacy_audience || "V√Ωchoz√≠ okruh u≈æivatel≈Ø";
    const t2 = config.cfg_friends_text || "P≈ô√°tel√©";
    const doneText = config.cfg_done_text || "Hotovo";
    try {
      const rangeSelect = await fbSupport.findByText(this.page, t1, { timeout: 2000 });
      if (rangeSelect.length > 0) {
        const friends = await fbSupport.findByText(this.page, t2, { timeout: 2000 });
        if (friends.length) {
          await friends[friends.length - 2].click();
          const done = await fbSupport.findByText(this.page, doneText, { timeout: 5000 });
          if (!done || done.length === 0) throw `Tlaƒç√≠tko "${doneText}" nenalezeno.`;
          await Wait.toSeconds(3, 'Dlouh√© ƒçek√°n√≠');
          await this.page.evaluate(el => { el.click({ clickCount: 2 }); }, done[0]);
          await Wait.toSeconds(15, 'Po p≈ôihl√°≈°en√≠');
          Log.info(`[FB] V√Ωchoz√≠ okruh u≈æivatel≈Ø nastaven.`);
        } else {
          throw `SPAN "${t2}" nenalezen.`;
        }
      } else {
        throw `SPAN "${t1}" nenalezen.`;
      }
      return true;
    } catch (err) {
      await Log.error(`[FB] Chyba v defaultRange: ${err}`);
      return false;
    }
  }

  async openGroup(group) {
    try {
      

      await this.bringToFront();

      let fbGroupUrl;
      if (group.type === "P") {
        fbGroupUrl = `https://FB.com/${group.fb_id}`;
      } else if (group.is_buy_sell_group) {
        fbGroupUrl = `https://FB.com/groups/${group.fb_id}/buy_sell_discussion`;
        Log.info('[FB]', `üõí Pou≈æ√≠v√°m optimalizovanou navigaci pro prodejn√≠ skupinu`);
      } else {
        fbGroupUrl = `https://FB.com/groups/${group.fb_id}`;
      }
      
      // Lidsk√° pauza p≈ôed navigac√≠ na skupinu
      await Wait.toSeconds(15, `P≈ôed navigac√≠ na skupinu ${group.name}`);

      Log.info('[FB]', `Otev√≠r√°m skupinu: ${fbGroupUrl}`);

      await this.navigateToPage(fbGroupUrl, {
        waitUntil: 'domcontentloaded',
        timeout: 30000
      });

      await Wait.toSeconds(8, 'N√°hodn√° pauza 5-8s');

      // NOV√â - Anal√Ωza skupiny po naƒçten√≠
      if (this.pageAnalyzer) {
        const analysis = await this.pageAnalyzer.analyzeFullPage({ forceRefresh: true });
        Log.info('[FB]', `Anal√Ωza skupiny dokonƒçena - stav: ${analysis.status}`);

        // Ulo≈æen√≠ detail≈Ø o skupinƒõ, pokud je to skuteƒçnƒõ skupina
        if (analysis.group?.isGroup) {
          await db.saveGroupExplorationDetails(analysis, this.userId);
          Log.info('[FB]', `Ulo≈æeny detaily pro skupinu ${group.fb_id}`);
        }

        // Ulo≈æen√≠ objeven√Ωch odkaz≈Ø
        if (analysis.links?.groups?.length > 0) {
          await db.saveDiscoveredLinks(analysis.links.groups, this.userId);
          Log.info('[FB]', `Ulo≈æeno ${analysis.links.groups.length} nov√Ωch odkaz≈Ø na skupiny.`);
        }
      }

      Log.success('[FB]', `Skupina ${group.fb_id} √∫spƒõ≈°nƒõ otev≈ôena`);
      return true;

    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi otev√≠r√°n√≠ skupiny ${group.fb_id}: ${err.message}`);
      return false;
    }
  }

  async readUserCounter() {
    await this.bringToFront();
    const labels = ["ƒçlen≈Ø", "sleduj√≠c√≠ch"];
    for (let label of labels) {
      try {
        const counter = await fbSupport.findByText(this.page, label, { timeout: 3500 });
        if (counter && counter.length > 0) {
          const value = await this.page.evaluate(el => el.textContent, counter[0]);
          return await this.getCounterValue(value);
        }
      } catch (err) {
        await Log.error(`[FB] Counter "${label}" nenalezen: ${err}`);
      }
    }
    return 0;
  }

  async getCounterValue(str) {
    try {
      let regex = /[+-]?\d+(\.\d+)?/g;
      let [floats] = str.replace(",", ".").match(regex).map(v => parseFloat(v));
      if (str.includes("tis.")) floats *= 1000;
      return floats;
    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi parsov√°n√≠ counter value: ${err}`);
      return 0;
    }
  }

  async addMeToGroup() {
    try {
      await this._clickByText("P≈ôidat se ke skupinƒõ", 1000);
      await Wait.toSeconds(15, 'Po p≈ôihl√°≈°en√≠');
      Log.info(`[FB] P≈ôid√°n√≠ do skupiny √∫spƒõ≈°n√©.`);
      return true;
    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi p≈ôid√°v√°n√≠ do skupiny: ${err}`);
      return false;
    }
  }

  async clickLike() {
    if (Math.random() < 0.1) { // 10% ≈°ance
      try {
        const config = await getAllConfig();
        const likeText = config.cfg_like_text || "To se mi l√≠b√≠";
        const likes = await fbSupport.findByText(this.page, likeText, { timeout: 5000 });
        if (!likes.length) throw `Tlaƒç√≠tko "${likeText}" nenalezeno.`;
        const randomLike = likes[Math.floor(Math.random() * likes.length)];
        await randomLike.click();
        Log.info(`[FB] Kliknuto na tlaƒç√≠tko "${likeText}".`);
        await Wait.toSeconds(5, 'Dlouh√© ƒçek√°n√≠ na like');
        return true;
      } catch (err) {
        await Log.error(`[FB] Chyba p≈ôi klik√°n√≠ na lajk tlaƒç√≠tko: ${err}`);
        return false;
      }
    } else {
      Log.info(`[FB] Kliknut√≠ na lajk tlaƒç√≠tko p≈ôeskoƒçeno (n√°hodn√©).`);
      return true;
    }
  }

  // Pokraƒçov√°n√≠ t≈ô√≠dy FBBot

  async contentNotAvailable() {
    return await this._checkTexts("Obsah teƒè nen√≠ dostupn√Ω", "P≈ôej√≠t do kan√°lu");
  }

  async stillSendButton() {
    if (!this.pageAnalyzer) {
      throw new Error('PageAnalyzer nen√≠ inicializov√°n');
    }

    const exists = await this.pageAnalyzer.elementExists("Zve≈ôejnit", { 
      matchType: 'exact',
      refreshCache: true 
    });
    
    if (exists) {
      Log.info(`[FB] Tlaƒç√≠tko "Zve≈ôejnit" st√°le nalezeno!`);
      return true;
    }
    return false;
  }

  async spamDetected() {
    return await this._checkTexts("Zve≈ôejnit", "p≈ôed spamem");
  }

  async tryAgainLater() {
    return await this._checkTexts("Zve≈ôejnit", "M≈Ø≈æete to zkusit pozdƒõji");
  }

  async problemWithURL() {
    return await this._checkTexts("Zve≈ôejnit", "probl√©m se zadanou adresou");
  }

  async loginFailedEn() {
    if (!this.pageAnalyzer) {
      throw new Error('PageAnalyzer nen√≠ inicializov√°n');
    }

    const found = await this.pageAnalyzer.elementExists("Forgot Account?", {
      matchType: 'exact',
      refreshCache: true
    });
    if (found) {
      Log.info(`[FB] Text "Forgot Account?" nalezen.`);
      return true;
    }
    return false;
  }

  async loginFailedCs() {
    if (!this.pageAnalyzer) {
      throw new Error('PageAnalyzer nen√≠ inicializov√°n');
    }

    const found = await this.pageAnalyzer.elementExists("Nepamatujete si sv≈Øj √∫ƒçet?", {
      matchType: 'exact',
      refreshCache: true
    });
    if (found) {
      Log.info(`[FB] Text "Nepamatujete si sv≈Øj √∫ƒçet?" nalezen.`);
      return true;
    }
    return false;
  }

  async getScreenshot(name = "screenshot") {
    const time = new Date();
    const y = time.getFullYear().toString().slice(-2);
    const m = (time.getMonth() + 1).toString().padStart(2, '0');
    const d = time.getDate().toString().padStart(2, '0');
    const h = time.getHours().toString().padStart(2, '0');
    const min = time.getMinutes().toString().padStart(2, '0');
    const s = time.getSeconds().toString().padStart(2, '0');
    const filename = `errors/${name}_${y}${m}${d}_${h}${min}${s}.png`;

    try {
      await this.page.screenshot({ path: filename });
      Log.info(`[FB] Screenshot ulo≈æen: ${filename}`);
    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi ukl√°d√°n√≠ screenshotu: ${err}`);
    }
  }

  async getScreenshotForDatabase() {
    try {
      const image = await this.page.screenshot({ type: 'png' });
      return image;
    } catch (err) {
      await Log.error(`[FB] Screenshot pro DB selhal: ${err}`);
      return null;
    }
  }

  // Pokraƒçov√°n√≠ t≈ô√≠dy FBBot

  async isSellGroup() {
    const config = await getAllConfig();
    const sellText = config.cfg_sell_text || "Prodat";
    const found = await fbSupport.findByText(this.page, sellText, { timeout: 3500 });
    if (found.length) {
      Log.info(`[FB] Skupina je prodejn√≠.`);
      return true;
    }
    return false;
  }

  async clickDiscus() {
    try {
      // Pou≈æij ji≈æ nalezen√Ω element pokud existuje
      if (this.discussionElement) {
        try {
          // Ovƒõ≈ô, ≈æe element je st√°le platn√Ω
          const elementExists = await this.page.evaluate((el) => {
            return el && el.isConnected && el.offsetParent !== null;
          }, this.discussionElement);
          
          if (elementExists) {
            await this.discussionElement.click();
            Log.success('[FB]', '√öspƒõ≈°nƒõ kliknuto na element pro diskuzi (z cache)');
            return true;
          } else {
            await Log.warn('[FB]', 'Element pro diskuzi ji≈æ nen√≠ platn√Ω, hled√°m znovu...');
          }
        } catch (err) {
          await Log.warn('[FB]', `Chyba p≈ôi ovƒõ≈ôov√°n√≠ elementu pro diskuzi: ${err.message}, hled√°m znovu...`);
        }
      }

      // Fallback - hledej element znovu
      if (await this.findDiscussionElement()) {
        await this.discussionElement.click();
        Log.success('[FB]', '√öspƒõ≈°nƒõ kliknuto na element pro diskuzi (novƒõ nalezen√Ω)');
        return true;
      }
      
      throw new Error('Element pro diskuzi nebyl nalezen');
    } catch (err) {
      Log.debug(`[FB] clickDiscus selhal: ${err.message}`);
      return false;
    }
  }

  async joinToGroup() {
    try {
      if (!this.pageAnalyzer) {
        throw new Error('PageAnalyzer nen√≠ inicializov√°n');
      }

      // Pokud u≈æ m√°me text z findJoinGroupElement, pou≈æij ho
      if (this.joinGroupText) {
        const success = await this.pageAnalyzer.clickElementWithText(this.joinGroupText, {
          matchType: 'exact',
          naturalDelay: true,
          waitAfterClick: true
        });

        if (success) {
          Log.success('[FB]', '√öspƒõ≈°nƒõ kliknuto na element pro p≈ôid√°n√≠ do skupiny pomoc√≠ PageAnalyzer');
          return true;
        }
      }

      // Pokud nem√°me text, zkus naj√≠t element
      if (await this.findJoinGroupElement()) {
        const success = await this.pageAnalyzer.clickElementWithText(this.joinGroupText, {
          matchType: 'exact',
          naturalDelay: true,
          waitAfterClick: true
        });

        if (success) {
          Log.success('[FB]', '√öspƒõ≈°nƒõ kliknuto na element pro p≈ôid√°n√≠ do skupiny (novƒõ nalezen√Ω)');
          return true;
        }
      }
      
      throw new Error('Element pro p≈ôid√°n√≠ do skupiny nebyl nalezen');
    } catch (err) {
      await Log.error(`[FB] Chyba v joinToGroup: ${err.message}`);
      return false;
    }
  }

  async handleAcceptExpertInvite() {
    try {
      const config = await getAllConfig();
      const acceptText = config.cfg_accept_text || 'P≈ôijmout';
      const expertText = config.cfg_expert_accept || 'expertem skupiny';
      Log.info('[FB]', `Hled√°m tlaƒç√≠tko "${acceptText}" pro pozv√°nku experta...`);
      // Hled√°me tlaƒç√≠tko "P≈ôijmout" v kontextu, kde se mluv√≠ o expertovi.
      const button = await this.page.waitForSelector(`xpath///div[@role='button'][.//span[text()='${acceptText}'] and ancestor::div[contains(., '${expertText}')]]`, { timeout: 5000 });
      
      if (button) {
        await button.click();
        await Wait.toSeconds(3, 'Poƒçkat na reakci'); // Poƒçkat na reakci
        Log.success('[FB]', 'Pozv√°nka pro experta byla p≈ôijata.');
        return true;
      }
      await Log.warn('[FB]', 'Tlaƒç√≠tko "P≈ôijmout" pro pozv√°nku experta nenalezeno.');
      return false;
    } catch (err) {
      await Log.error(`[FB] Chyba p≈ôi p≈ôij√≠m√°n√≠ pozv√°nky experta: ${err.message}`);
      return false;
    }
  }


  async testXPath(selector) {
    try {
      const found = await this.page.$x(selector, { visible: true, timeout: 2000 });
      Log.info(`[FB] XPath ${selector} ‚Äì nalezeno: ${found.length}`);
      if (!found.length) throw `Element pro XPath ${selector} nenalezen.`;
      return found[0];
    } catch (err) {
      await Log.error(`[FB] Chyba v testXPath: ${err}`);
      return false;
    }
  }

  async debugPostCreationElements() {
    try {
      Log.info('[DEBUG]', 'Spou≈°t√≠m diagnostiku element≈Ø pro vytvo≈ôen√≠ p≈ô√≠spƒõvku...');
      
      // Najdi v≈°echny span elementy pomoc√≠ JavaScript evaluation
      const spans = await this.page.evaluate(() => {
        const postKeywords = ['napi≈°te', 'p≈ô√≠spƒõvek', 'sd√≠let', 'psan√≠', 'hon√≠ hlavou', 'mysl√≠te', 'skupina'];
        
        return Array.from(document.querySelectorAll('span')).map((el, index) => {
          const text = el.textContent?.trim() || '';
          const parent = el.parentElement;
          const clickableParent = el.closest('button, div[role="button"], [tabindex], [onclick]');
          
          const isPostRelated = postKeywords.some(keyword => 
            text.toLowerCase().includes(keyword.toLowerCase())
          );
          
          return {
            index,
            text: text,
            hasClickableParent: !!clickableParent,
            parentTag: parent?.tagName,
            isPostRelated: isPostRelated,
            visible: el.offsetWidth > 0 && el.offsetHeight > 0
          };
        }).filter(spanData => spanData.isPostRelated && spanData.visible);
      });
      
      Log.info('[DEBUG]', `Nalezeno ${spans.length} relevantn√≠ch span element≈Ø na str√°nce`);
      
      const postRelatedTexts = spans.map(spanData => spanData.text);
      
      Log.info('[DEBUG]', `Nalezeno ${postRelatedTexts.length} text≈Ø souvisej√≠c√≠ch s p≈ô√≠spƒõvky:`);
      postRelatedTexts.forEach(text => {
        Log.info('[DEBUG]', `- "${text}"`);
      });
      
      // Pokus o nalezen√≠ alternativn√≠ch selektor≈Ø
      const alternativeSelectors = [
        'div[role="button"][aria-label*="p≈ô√≠spƒõvek"]',
        'div[role="button"][aria-label*="Napi≈°te"]',
        'div[role="button"][aria-label*="Co se"]',
        'div[role="textbox"][aria-label*="p≈ô√≠spƒõvek"]',
        'div[role="textbox"][aria-label*="Napi≈°te"]',
        'div[contenteditable="true"]',
        'textarea[placeholder*="p≈ô√≠spƒõvek"]',
        'div[data-testid*="post"]',
        'div[data-testid*="composer"]'
      ];
      
      Log.info('[DEBUG]', 'Testov√°n√≠ alternativn√≠ch selektor≈Ø...');
      for (const selector of alternativeSelectors) {
        try {
          const elements = await this.page.evaluate((sel) => {
            return Array.from(document.querySelectorAll(sel)).map((el, index) => ({
              index,
              text: el.textContent?.trim() || '',
              ariaLabel: el.getAttribute('aria-label') || '',
              isVisible: el.offsetParent !== null
            }));
          }, selector);
          
          if (elements.length > 0) {
            Log.info('[DEBUG]', `Selektor "${selector}" na≈°el ${elements.length} element≈Ø`);
            
            // Test prvn√≠ho elementu
            const firstElementInfo = elements[0];
            const elementInfo = await this.page.evaluate((sel, elementIndex) => {
              const allElements = document.querySelectorAll(sel);
              const el = allElements[elementIndex];
              if (!el) return null;
              const rect = el.getBoundingClientRect();
              return {
                text: el.textContent?.trim() || '',
                ariaLabel: el.getAttribute('aria-label') || '',
                placeholder: el.getAttribute('placeholder') || '',
                visible: rect.width > 0 && rect.height > 0,
                tagName: el.tagName
              };
            }, selector, firstElementInfo.index);
            
            Log.info('[DEBUG]', `Element info: ${JSON.stringify(elementInfo)}`);
          }
        } catch (err) {
          Log.debug('[DEBUG]', `Selektor "${selector}" selhal: ${err.message}`);
        }
      }
      
    } catch (err) {
      await Log.error('[DEBUG]', `Chyba v diagnostice: ${err.message}`);
    }
  }

  async debugFindText() {
    Log.info('[DEBUG]', 'Ladƒõn√≠ vyhled√°v√°n√≠ textu spu≈°tƒõno. Zadej text pro hled√°n√≠ nebo "x" pro ukonƒçen√≠.');

    const readline = await import('node:readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: true
    });

    const ask = (prompt) => new Promise(resolve => rl.question(prompt, resolve));

    while (true) {
      const input = await ask('Text pro _findByText(): ');
      if (input.trim().toLowerCase() === 'x') break;

      try {
        const elements = await fbSupport.findByText(this.page, input.trim(), { timeout: 3000 });
        Log.info('[DEBUG]', `Nalezeno ${elements.length} prvk≈Ø pro "${input.trim()}".`);

        for (let i = 0; i < elements.length; i++) {
          const text = await this.page.evaluate(el => el.innerText, elements[i]);
          Log.info(`[${i + 1}]`, text.replace(/\n/g, ' '));
        }
      } catch (err) {
        await Log.error('[DEBUG]', err);
      }
    }

    rl.close();
    Log.info('[DEBUG]', 'Ladƒõn√≠ vyhled√°v√°n√≠ textu ukonƒçeno.');
  }

  /**
   * Zav≈ôe FB str√°nku a vyƒçist√≠ zdroje
   * @param {boolean} closeBrowser - Pokud true, zav≈ôe cel√Ω prohl√≠≈æeƒç m√≠sto jen z√°lo≈æky
   * @returns {Promise<boolean>} True pokud bylo √∫spƒõ≈°n√©
   */
  async close(closeBrowser = false) {
    try {
      if (!this.isInitialized) {
        Log.info('[FB]', 'FBBot nen√≠ inicializov√°n, close nen√≠ pot≈ôeba');
        return true;
      }

      if (this.page && !this.page.isClosed()) {
        Log.info('[FB]', 'Zav√≠r√°m FB str√°nku...');
        await this.page.close();
        Log.success('[FB]', 'FB str√°nka zav≈ôena');
      }
      
      // Pokud je po≈æadov√°no zav≈ôen√≠ cel√©ho prohl√≠≈æeƒçe
      if (closeBrowser && this.context && this.context.browser) {
        try {
          Log.info('[FB]', 'Zav√≠r√°m cel√Ω prohl√≠≈æeƒç...');
          await this.context.browser().close();
          Log.success('[FB]', 'Prohl√≠≈æeƒç √∫spƒõ≈°nƒõ zav≈ôen');
        } catch (browserCloseErr) {
          await Log.warn('[FB]', `Chyba p≈ôi zav√≠r√°n√≠ prohl√≠≈æeƒçe: ${browserCloseErr.message}`);
        }
      }

      this.page = null;
      this.newThingElement = null;
      this.isInitialized = false;
      return true;

    } catch (err) {
      await Log.error('[FB] close', err);
      return false;
    }
  }

  /**
   * Kontroluje, zda je FBBot p≈ôipraven k pou≈æit√≠
   * @returns {boolean} True pokud je p≈ôipraven
   */
  isReady() {
    return this.isInitialized && this.page && !this.page.isClosed();
  }

  async getCurrentPageAnalysis() {
    if (!this.pageAnalyzer) {
      await Log.warn('[FB]', 'PageAnalyzer nen√≠ k dispozici');
      return null;
    }

    try {
      return await this.pageAnalyzer.analyzeFullPage({
        includePostingCapability: true,
        includeGroupAnalysis: true
      });
    } catch (err) {
      await Log.error('[FB]', `Chyba p≈ôi z√≠sk√°v√°n√≠ anal√Ωzy: ${err.message}`);
      return null;
    }
  }

  // Cache byla odstranƒõna - PageAnalyzer v≈ædy vrac√≠ aktu√°ln√≠ data

  /**
   * Lidsk√© psan√≠ textu znak po znaku
   * @param {string} text - Text k naps√°n√≠
   * @returns {Promise<void>}
   */
  async humanTyping(text) {
    if (!this.page) {
      throw new Error('Page nen√≠ k dispozici pro psan√≠');
    }

    const { Wait } = await import('./iv_wait.class.js');
    const words = text.split(' ');
    
    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      
      // Napsat slovo znak po znaku
      for (const char of word) {
        await this.page.keyboard.type(char);
        await Wait.charDelay();
      }
      
      // P≈ôidat mezeru a ƒçekat mezi slovy (kromƒõ posledn√≠ho slova)
      if (i < words.length - 1) {
        await this.page.keyboard.type(' ');
        await Wait.wordDelay();
      }
    }
  }

}
